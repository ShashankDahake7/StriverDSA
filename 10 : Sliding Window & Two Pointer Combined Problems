/* Step 10.1: Medium Problems */

// Longest Substring Without Repeating characters	
	
// Method-1
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int maxLength = 0, n = s.length();
        for(int i = 0; i < n; i++){
            unordered_set<char> st;
            for(int j = i; j < n; j++){
                if(st.find(s[j]) != st.end()){
                    maxLength = max(maxLength, j - i);
                    break;
                }
                st.insert(s[j]);
            }
        }
        return maxLength;
    }
};

// Method-2
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i = 0, j = 0, maxLength = 0;
        unordered_set<char> st;
        while (j < s.length()) {
            if (st.find(s[j]) == st.end()) {
                st.insert(s[j]);
                maxLength = max(maxLength, j - i + 1);
                j++;
            } 
            else {
                st.erase(s[i]);
                i++;
            }
        }
        return maxLength;
    }
};

// Max Consecutive Ones III				

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int i = 0, j = 0;
        while(j < nums.size()){
            if(nums[j] == 0){
                k--;
            }
            if(k < 0){
                if(nums[i] == 0){
                    k++;
                }
                i++;
            }
            j++;
        }
        return j - i;
    }
};


// Fruit Into Baskets				

class Solution {
public:
    int totalFruit(vector<int>& fruits) {
        unordered_map<int, int> baskets;
        int left = 0, ans = 0;
        for (int right = 0; right < fruits.size(); right++) {
            baskets[fruits[right]]++;
            if (baskets.size() > 2) {
                baskets[fruits[left]]--;
                if (baskets[fruits[left]] == 0) {
                    baskets.erase(fruits[left]);
                }
                left++;
            }
            ans = max(ans, right - left + 1);
        }
        return ans;
    }
};

// Longest repeating character replacement		

class Solution {
public:
    int characterReplacement(string s, int k) {
        vector<int> mp(26, 0);
        int i = 0, j = 0, maxCount = 0;
        int result = 0;
        while (i < s.length()) {
            mp[s[i] - 'A']++;
            maxCount = max(maxCount, mp[s[i] - 'A']);
            if (i - j + 1 - maxCount > k) {
                mp[s[j] - 'A']--;
                j++;
            }
            result = max(result, i - j + 1);
            i++;
        }
        return result;
    }
};

// Binary subarray with sum				

class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        unordered_map<int, int> mp;
        int t = 0;
        mp[0] = 1;
        int c = 0;
        for(int i = 0; i < nums.size(); i++){
            c += nums[i];
            if(mp.find(c - goal) != mp.end()){
                t += mp[c - goal];
            }
            mp[c]++;
        }
        return t;
    }
};

// Count number of nice subarrays				

class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 0) {
                nums[i] = 0;
            } 
            else {
                nums[i] = 1;
            }
        }
        int sum = 0;
        unordered_map<int, int> mp;
        mp[sum] = 1;
        int c = 0;
        for (int i = 0; i < n; i++) {
            c += nums[i];
            if (mp.find(c - k) != mp.end()) {
                sum += mp[c - k];
            }
            mp[c]++;
        }
        return sum;
    }
};

// Number of substring containing all three characters		

// Method-1
class Solution {
public:
    int numberOfSubstrings(string s) {
        int n = s.size();
        vector<int> mp(3, 0);
        int ans = 0;
        int i = 0;
        for(int j = 0; j < n; j++){
            mp[s[i] - 'a']++;
            while(mp[0] > 0 && mp[1] > 0 && mp[2] > 0){
                ans += n - i;
                mp[s[i] - 'a']--;
            }
        }
        return ans;
    }
};

// Method-2
class Solution {
public:
    int numberOfSubstrings(string s) {
        int cnt = 0, n = s.length();
        int a = -1, b = -1, c = -1;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'a')
                a = i;
            else if (s[i] == 'b')
                b = i;
            else
                c = i;
            cnt += (min(a, min(b, c)) + 1);
        }
        return cnt;
    }
};

// Maximum point you can obtain from cards

class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
        int n = cardPoints.size();
        int res = 0;
        for (int i = 0; i < k; i++) {
            res += cardPoints[i];
        }
        int currSum = res;
        for (int i = 0; i < k; i++) {
            currSum = currSum - (cardPoints[k - i - 1] - cardPoints[n - 1 - i]);
            res = max(res, currSum);
        }
        return res;
    }
};

/* Step 10.2: Hard Problems */

// Longest Substring with At Most K Distinct characters			

// Method-1

#include <unordered_set>
int kDistinctChars(int k, string &str){
    int ans = 0;
    for(int i = 0; i < str.length(); i++){
        // Create a set of unique characters
        unordered_set<char> uniqueChars;
        for(int j = i; j < str.length(); j++){
            // Add characters in the set
            uniqueChars.insert(str[j]);
            // If set size is greater than K then we won't consider this substring
            if(uniqueChars.size() > k){
                break;
            }
            // Update the answer
            ans = max(ans, j - i + 1);
        }
    }
    return ans;
}

// Method-2
#include<bits/stdc++.h>
int kDistinctChars(int k, string &str) {
    int n = str.size();
    int i = 0, j = 0, maxi = INT_MIN;
    unordered_map<char, int> mp;
    while (j < n) {
        mp[str[j]]++;
        while (mp.size() > k) {
            mp[str[i]]--;
            if (mp[str[i]] == 0) {
                mp.erase(str[i]);
            }
            i++;
        }
        maxi = max(maxi, j - i + 1);
        j++;
    }
    return maxi;
}

// Subarray with k different integers				

// Method-1
class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        int n = nums.size(), count = 0;
        for(int i = 0; i < n; i++){
            unordered_set<int> st;
            for(int j = i; j < n; j++){
                st.insert(nums[j]);
                if(st.size() == k){
                    count++;
                }
            }
        }
        return count++;
    }
};

// Method-2
class Solution {
public:
    int solve(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int, int> map;
        int count = 0, i = 0, j = 0;
        while (j < n) {
            map[nums[j]]++;
            while (map.size() > k) {
                map[nums[i]]--;
                if (map[nums[i]] == 0) {
                    map.erase(nums[i]);
                }
                i++;
            }
            count += j - i + 1;
            j++;
        }
        return count;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return solve(nums, k) - solve(nums, k - 1);
    }
};

// Minimum Window Substring				

class Solution {
public:
    string minWindow(string s, string t) {
        vector<int> mp(128, 0);
        int i = 0, j = 0;
        int currWindowSize, mini = INT_MAX, start_i = 0;
        for(char c : t){
            mp[c]++;
        }
        int reqCount = t.size();
        while(j < s.size()){
            if(mp[s[j]] > 0){
                reqCount--;
            }
            mp[s[j]]--;
            while(reqCount == 0){
                currWindowSize = j - i + 1;
                if(currWindowSize < mini){
                    mini = currWindowSize;
                    start_i = i;
                }
                mp[s[i]]++;
                if(mp[s[i]] > 0){
                    reqCount++;
                }
                i++;
            }
            j++;
        }
        return mini == INT_MAX ? "" : s.substr(start_i, mini);
    }
};

// Minimum Window Subsequence

string minWindow(string S, string T) {
    string ans;
    int i = 0, j = 0, k = 0;
    int len = INT_MAX;
    while (j < S.length() && k < T.length()) {
        if(S[j] == T[k]) {
        	k++;
        }
	if (k == T.length()) {
		i = j;
		k = T.length() - 1;
		while (i >= 0 && k >= 0) {
			if (S[i] == T[k]) {
				k--;
			}
			i--;
		}
		i++;
		if (len > j - i + 1) {
			len = j - i + 1;				
			ans = S.substr(i, j - i + 1);
		}
		k = 0;
		j = i + 1;
	}
	j++;
    }
    return ans;
}
