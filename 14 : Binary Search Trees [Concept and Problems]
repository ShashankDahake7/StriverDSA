/* Step 14.1: Concepts */

// Introduction to Binary Search Tree		

bool isValidBST(vector<int> &order){
    for(int i = 0; i < order.size() - 1; i++){
        if(order[i + 1] <= order[i]){
            return false;
        }
    }
    return true;
}

// Search in a Binary Search Tree		
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if (root == NULL) {
            return NULL;
        }
        if (root->val == val) {
            return root;
        }
        if (root->val < val) {
            return searchBST(root->right, val);
        } else {
            return searchBST(root->left, val);
        }
    }
};

// Find Min/Max in BST				

/*
 * class Node
 * {
 * public:
 *     int data;
 *     Node *left;
 *     Node *right;
 *     Node() : data(0), left(nullptr), right(nullptr){};
 *     Node(int x) : data(x), left(nullptr), right(nullptr) {}
 *     Node(int x, Node *left, Node *right) : data(x), left(left), right(right) {}
 * };
 */
int minVal(Node* root){
	if(root == NULL){
		return -1;
	}
	Node* curr = root;
	while(curr->left != NULL){
		curr = curr->left;
	}
	return curr->data;
}

/* Step 14.2: Practice Problems */

// Ceil in a Binary Search Tree		

#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure:

    class BinaryTreeNode {
    public:
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;
        
        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
        
        ~BinaryTreeNode() {
            if (left) {
              delete left;
            }
            if (right) {
              delete right;
            }
        }
    };

************************************************************/

int findCeil(BinaryTreeNode<int> *root, int x){
    int h = -1;
    while (root != NULL) {
        if(root->data == x){
            h = root->data;
            return h;
        }
        if(root->data < x){
            root = root->right;
        }
        else{
            h = root->data;
            root = root->left;
        }
    }
    return h;
}

// Floor in a Binary Search Tree		

int Floor(BinaryTreeNode<int> *root, int x){
	int l = -1;
	while(root != NULL){
		if(root->data == x){
			l = root->data;
			return l;
		}
		if(root->data < x){
			l = root->data;
			root = root->right;
		}
		else{
			root = root->left;
		}
	}
	return l;
}


// Insert a given Node in Binary Search Tree
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root == NULL){
            TreeNode* root = new TreeNode(val);
            return root;
        }
        if(val < root->val){
            root->left = insertIntoBST(root->left, val);
        }
        else{
            root->right = insertIntoBST(root->right, val);
        }
        return root;
    }
};

// Delete a Node in Binary Search Tree		
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* minVal(TreeNode* root) {
        TreeNode* temp = root;
        while (temp->left != NULL) {
            temp = temp->left;
        }
        return temp;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == NULL) {
            return root;
        }
        if (root->val == key) {
            // 0 child
            if (root->right == NULL && root->left == NULL) {
                delete root;
                return NULL;
            }
            // 1 child

            // left child
            if (root->left != NULL && root->right == NULL) {
                TreeNode* temp = root->left;
                delete root;
                return temp;
            }
            // right child
            if (root->left == NULL && root->right != NULL) {
                TreeNode* temp = root->right;
                delete root;
                return temp;
            }
            // 2 child
            if (root->left != NULL && root->right != NULL) {
                int mini = minVal(root->right)->val;
                root->val = mini;
                root->right = deleteNode(root->right, mini);
                return root;
            }
        } else if (root->val > key) {
            // left part me jana hai
            root->left = deleteNode(root->left, key);
        } else {
            // right part me jana hai
            root->right = deleteNode(root->right, key);
        }
        return root;
    }
};

// Find K-th smallest/largest element in BST
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int i = 0, ans = 0;
        if (root == NULL) {
            return -1;
        }
        TreeNode* curr = root;
        TreeNode* prev;
        while (curr != NULL) {
            if (curr->left == NULL) {
                i++;
                if (i == k) {
                    ans = curr->val;
                }
                curr = curr->right;
            } 
            else {
                prev = curr->left;
                while (prev->right != NULL && prev->right != curr) {
                    prev = prev->right;
                }
                if (prev->right == NULL) {
                    prev->right = curr;
                    curr = curr->left;
                } else {
                    prev->right = NULL;
                    i++;
                    if (i == k) {
                        ans = curr->val;
                    }
                    curr = curr->right;
                }
            }
        }
        return ans;
    }
};

// Check if a tree is a BST or BT
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode* root, long min_value, long max_value) {
        if (root == NULL) {
            return true;
        }
        if (root->val > min_value && root->val < max_value) {
            return helper(root->left, min_value, root->val) && helper(root->right, root->val, max_value);
        }
        return false;
    }
    bool isValidBST(TreeNode* root) { 
        return helper(root, LONG_MIN, LONG_MAX);
    }
};

// LCA in Binary Search Tree		
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        int small = min(p->val, q->val);
        int large = max(p->val, q->val);
        while (root != NULL) {
            if (root->val > large) { // p, q belong to the left subtree
                root = root->left;
            } else if (root->val < small) { // p, q belong to the right subtree
                root = root->right;
            } else { // Now, small <= root.val <= large -> This root is the LCA between p and q
                return root;
            }
        }
        return NULL;
    }
};

// Construct a BST from a preorder traversal	
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(int& i, int mini, int maxi, vector<int>& preorder){
        if(i >= preorder.size()){
            return NULL;
        }
        TreeNode* root = NULL;
        if(preorder[i] > mini && preorder[i] < maxi){
            root = new TreeNode(preorder[i++]);
            root->left = solve(i, mini, root->val, preorder);
            root->right = solve(i, root->val, maxi, preorder);
        }
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int i = 0;
        return solve(i, INT_MIN, INT_MAX, preorder);
    }
};

// Inorder Successor/Predecessor in BST
	
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution{
  public:
    Node * inOrderSuccessor(Node *root, Node *x){
        Node* curr = root, *ans = NULL;
        while(curr != NULL){
            if(curr->data > x->data){
                ans = curr;
                curr = curr->left;
            }
            else{
                curr = curr->right;
            }
        }
        return ans;
    }
};

// Merge 2 BST's		
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class BSTIterator {
public:
    TreeNode* rt;
    // convert tree to double linked list
    void DLL(TreeNode* root, TreeNode*& prev) {
        if (!root)
            return;
        DLL(root->right, prev);
        if (prev) {
            root->right = prev;
            prev->left = root;
        }
        prev = root;
        DLL(root->left, prev);
    }
    BSTIterator(TreeNode* root) {
        rt = root;
        TreeNode* prev = NULL;
        DLL(rt, prev);
        rt = prev;
    }
    int next() {
        int val = rt->val;
        rt = rt->right;
        return val;
    }
    bool hasNext() {
        if (!rt)
            return false;
        return true;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */

// Two Sum In BST | Check if there exists a pair with Sum K		
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& ans) {
        if (root == NULL)
            return;
        inorder(root->left, ans);
        ans.push_back(root->val);
        inorder(root->right, ans);
    }
    bool findTarget(TreeNode* root, int k) {
        vector<int> ans;
        inorder(root, ans);
        int size = ans.size();
        int start = 0, end = size - 1;
        while (start < end) {
            if (ans[start] + ans[end] == k)
                return true;
            else if (ans[start] + ans[end] > k)
                end--;
            else
                start++;
        }
        return false;
    }
};

// Recover BST | Correct BST with two nodes swapped
	
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *prev, *first, *second;
    void solve(TreeNode* root){
        if(root == NULL){
            return;
        }
        solve(root->left);
        if(prev != NULL && prev->val >= root->val){
            if(first == NULL){
                first = prev;
            }
            second = root;
        }
        prev = root;
        solve(root->right);
    }
    void recoverTree(TreeNode* root) {
        prev = NULL;
        first = NULL;
        second = NULL;
        solve(root);
        swap(first->val, second->val);
    }
};

// Largest BST in Binary Tree

#include <bits/stdc++.h>
/************************************************************

    Following is the Binary Tree node structure

    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

bool isBST(TreeNode* root, int min, int max){
    if (root == NULL){
        // Base case: An empty subtree is a valid BST.
        return true;
    }
    // Check if the data of the current node is within the specified range.
    if (root->data < min || root->data > max){
        // Current node's data violates the BST property.
        return false;
    }
    // Recursively check left and right subtrees, updating the range accordingly.
    return isBST(root->left, min, root->data - 1) && isBST(root->right, root->data + 1, max);
}
// Function to calculate the size of a binary tree.
int size(TreeNode* root){
    if (root == NULL){
        // Base case: Size of an empty subtree is 0.
        return 0;
    }
    // Calculate size as 1 (current node) + size of left subtree + size of right subtree.
    return 1 + size(root->left) + size(root->right);
}
// Function to find the size of the largest BST in a given binary tree.
int largestBST(TreeNode* root){
    // If the current subtree is a valid BST.
    if (isBST(root, INT_MIN, INT_MAX) == true){
        // Return the size of the current subtree.
        return size(root);
    }
    // If the current subtree is not a valid BST,
    // recursively find the largest BST in the left and right subtrees.
    return max(largestBST(root->left), largestBST(root->right));
}
