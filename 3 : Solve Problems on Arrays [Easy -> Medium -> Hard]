/* Step 3.1: Easy */

// Largest Element in an Array		

#include <bits/stdc++.h> 
int largestElement(vector<int> &arr, int n) {
    int max=INT_MIN;
    for(int i=0;i<n;i++){
        if(arr[i]>max){
            max=arr[i];
        }
    }
    return max;
}

// Second Largest and Minimum Element in an Array â€¦		

vector<int> getSecondOrderElements(int n, vector<int> arr)
{
    int maxi = INT_MIN, mini = INT_MAX;
    for (int i = 0; i < n; i++)
    {
        maxi = max(maxi, arr[i]);
        mini = min(mini, arr[i]);
    }
    int secMaxi = INT_MIN, secMini = INT_MAX;
    for (int i = 0; i < n; i++)
    {
        if (arr[i] != maxi)
        {
            secMaxi = max(secMaxi, arr[i]);
        }
        if (arr[i] != mini)
        {
            secMini = min(secMini, arr[i]);
        }
    }
    return {secMaxi, secMini};
}

// Check if the array is sorted		
	
// Coding Ninja
int isSorted(int n, vector<int> a) {
    for(int i=1;i<n;i++){
        if(a[i-1]>a[i]){
            return 0;
        }
    }
    return 1;
}

// Leetcode (Sorted and Rotated)
class Solution {
public:
    bool check(vector<int>& nums) {
        int count = 0;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i] > nums[i+1]){
                count++;
            }
        }
        if(nums[nums.size()-1] > nums[0]){
            count++;
        }
        if(count <= 1){
            return true;
        }
        else{
            return false;
        }
    }
};

// Remove duplicates from Sorted array		
	
int removeDuplicates(vector<int> &nums, int n) {
	int ans = 1;
	for (int i = 1; i < nums.size(); i++) {
		if (nums[i] != nums[i - 1]) {
			nums[ans] = nums[i];
			ans++;
		}
	}
	return ans;
}

// Left Rotate an array by one place		
	
// Method-1
#include <bits/stdc++.h> 
vector<int> rotateArray(vector<int>& arr, int n) {
    int temp = arr[0];
    for(int i = 1; i < n;i++){
        arr[i-1] = arr[i];
    }
    arr[n-1] = temp;
    return arr;
}

// Method-2
#include <bits/stdc++.h> 
vector<int> rotateArray(vector<int>& arr, int n){
    reverse(arr.begin()+1,arr.end());
    reverse(arr.begin(),arr.end());
    return arr;
}

// Left rotate an array by K places		
	
vector<int> rotateArray(vector<int> arr, int k) {
    reverse(arr.begin(), arr.begin() + k);
    reverse(arr.begin() + k, arr.end());
    reverse(arr.begin(), arr.end());
    return arr;
}

// Move Zeros to end		
	
vector<int> moveZeros(int n, vector<int> a) {
    int i=0,j=0;
    while(i<n){
        if(a[i]!=0){
            swap(a[i],a[j]);
            i++;
            j++;
        }
        else{
            i++;
        }
    }
    return a;
}

// Linear Search		

int linearSearch(int n, int num, vector<int> &arr)
{
    for(int i=0;i<n;i++){
        if(arr[i]==num){
            return i;
        }
    }
    return -1;
}

// Find the Union		

// Method-1
#include <bits/stdc++.h>
vector<int> sortedArray(vector<int> arr1, vector<int> arr2)
{
    set<int> s;
    vector<int> Union;
    for (int i = 0; i < arr1.size(); i++)
        s.insert(arr1[i]);
    for (int i = 0; i < arr2.size(); i++)
        s.insert(arr2[i]);
    for (auto &it : s)
        Union.push_back(it);
    return Union;
}

// Method-2
#include <bits/stdc++.h>
vector<int> sortedArray(vector<int> arr1, vector<int> arr2)
{
    int i = 0, j = 0; // pointers
    int n = arr1.size();
    int m = arr2.size();
    vector<int> Union; // Union vector
    while (i < n && j < m)
    {
        if (arr1[i] <= arr2[j]) // Case 1 and 2
        {
            if (Union.size() == 0 || Union.back() != arr1[i])
                Union.push_back(arr1[i]);
            i++;
        }
        else // case 3
        {
            if (Union.size() == 0 || Union.back() != arr2[j])
                Union.push_back(arr2[j]);
            j++;
        }
    }
    while (i < n) // IF any element left in arr1
    {
        if (Union.back() != arr1[i])
            Union.push_back(arr1[i]);
        i++;
    }
    while (j < m) // If any elements left in arr2
    {
        if (Union.back() != arr2[j])
            Union.push_back(arr2[j]);
        j++;
    }
    return Union;
}

// Find missing number in an array		
	
class Solution {
public:
    int missingNumber(vector<int>& nums) {
    int sum1=0;
    int n=nums.size();
    for(int i=0;i<n;i++){
        sum1=sum1+nums[i];
    }
    int sum2=(n*(n+1))/2;
    return sum2-sum1;
    }
};

// Maximum Consecutive Ones		

// Coding Ninja
int traffic(int n, int m, vector<int> arr) {
	int i = 0, j = 0, ans = INT_MIN, zero = 0;
	while (i < n) {
		if (arr[i] == 0) {
			zero++;
		}
		while (zero > m) {
			if (arr[j] == 0) {
				zero--;
			}
			j++;
		}
		ans = max(ans, i - j + 1);
		i++;
	}
	return ans;
}

// Leetcode
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& arr) {
        int n = arr.size();
        int ans = INT_MIN;
        int count=0;
        for(int i=0;i<n;i++){
            if(arr[i]==1){
                count++;
            }
            else{
                count=0;
            }
            ans = max(ans,count);
        }
        return ans;
    }
};

// Find the number that appears once and other numbers twice	
	
// Method-1 [ Coding Ninja ] 
#include<bits/stdc++.h>

int getSingleElement(vector<int> &arr){
	unordered_map<int,int> m;
	int ans;
	int n = arr.size();
	for(int i = 0; i < n; i++){
		m[arr[i]]++;
	}
	for(auto p : m){
		if(p.second==1){
			ans = p.first;
		}
	}
	return ans;
}

// Method-2 [ Coding Ninja ]
#include <vector>
int getSingleElement(vector<int> &arr) {
	for (int i = 0; i < arr.size(); i++) {
		if (arr[i] != arr[i + 1]) {
			return arr[i];
		} 
		else if (arr[i] == arr[i + 1]) {
			i++;
		}
	}
}

// Leetcode
// Method-1
class Solution {
public:
    int singleNumber(vector<int>& nums) { 
       int ans=0;
	   for(auto x:nums){
	       ans^=x;
       }
	   return ans;
    }
};

// Method-2
class Solution {
public:
    int singleNumber(vector<int>& nums) { 
        sort(nums.begin(),nums.end());
        for(int i=1;i<nums.size();i+=2)
        {
            if(nums[i]!=nums[i-1])
                return nums[i-1];
        }
        return nums[nums.size()-1];
    }
};

// Longest subarray with given sum K(Positives)	

// Method-1
#include <bits/stdc++.h>
int longestSubarrayWithSumK(vector<int> a, long long k) {
    unordered_map<int, int> m;
    int sum = 0, maxLen = 0;
    for (int i = 0; i < a.size(); i++) {
        sum += a[i];
        if (sum == k) {
            maxLen = i + 1;
        }
        if (m.find(sum) == m.end()) {
            m[sum] = i;
        }
        if (m.find(sum - k) != m.end()) {
            maxLen = max(maxLen, i - m[sum - k]);
        }
    }
    return maxLen;
}

// Method-2
int longestSubarrayWithSumK(vector<int> &nums, long long targetSum) {
    int right = 0, left = 0;
    int maxSubarrayLength = 0;
    int n = nums.size();
    long long currentSum = 0;
    while (right < n) {
        while (currentSum > targetSum && left <= right) {
            currentSum -= nums[left];
            left++;
        }
        if (currentSum == targetSum) {
            maxSubarrayLength = max(maxSubarrayLength, right - left);
        }
        if (right < n) {
            currentSum += nums[right++];
        }
    }
    int result;
    if (currentSum == targetSum) {
        result = max(maxSubarrayLength, right - left);
    }
    else {
        result = maxSubarrayLength;
    }
    return result;
}

// Longest subarray with sum K (Positives + Negatives)

#include <bits/stdc++.h>

int getLongestSubarray(vector<int> &nums, int k) {
    int ans=0;
    unordered_map<int,int> prefix_sum;
    int sum=0;
    for(int i=0;i<nums.size();i++){
        sum=sum+nums[i];
        if(sum==k) ans=max(ans,i+1);
        else{
            int rem=sum-k;
            if(prefix_sum.find(rem)!=prefix_sum.end()){
                int temp=i-prefix_sum[rem];
                ans=max(ans,temp);
            }
            if(prefix_sum.find(sum)==prefix_sum.end()){
                prefix_sum[sum]=i;
            }
        }
    }
    return ans;
}

/* Step 3.2: Medium */

// Two Sum

// Coding Ninja
#include <algorithm>
string read(int n, vector<int> book, int target) {
    sort(book.begin(), book.end());
    int i = 0, j = book.size() - 1;
    while (i < j) {
        if (book[i] + book[j] < target)
            i++;
        else if (book[i] + book[j] > target)
            j--;
        else
            return "YES";
    }
    return "NO";
}

// Leetcode
// Method-1 [ Brute Force Code ]
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {};
    }
};

// Method-2 [ Optimized Code ]
#include <unordered_map>
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
        for(int i = 0; i < nums.size(); i++){
            if(mp.find(target - nums[i]) == mp.end())
                mp[nums[i]] = i;
            else
                return {mp[target - nums[i]], i};
        }
        return {-1, -1};
    }
};

// Sort an array of 0's 1's and 2's		
	
// Coding Ninjas
#include <bits/stdc++.h> 
void sortArray(vector<int>& arr, int n)
{
    int a0=0,b1=0,c2=n-1;
    while(b1<=c2){
        if(arr[b1]==0){
            swap(arr[a0],arr[b1]);
            a0++;
            b1++;
        }
        else if(arr[b1]==1){
            b1++;
        }
        else{
            swap(arr[b1],arr[c2]);
            c2--;
        }
    }
}

// Leetcode
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int a0=0,b1=0,c2=nums.size()-1;
        while(b1<=c2){
            if(nums[b1]==0){
                swap(nums[a0],nums[b1]);
                a0++;
                b1++;
            }
            else if(nums[b1]==1){
                b1++;
            }
            else{
                swap(nums[b1],nums[c2]);
                c2--;
            }
        }
    }
};

// Majority Element (>n/2 times)		
	
// Coding Ninja
//Method-1
#include<bits/stdc++.h>
int majorityElement(vector<int> v) {
    int n=v.size();
    map<int,int> m;
    for(int i=0;i<n;i++){
        m[v[i]]++;
    }
    for(auto it:m){
        if(it.second>n/2){
            return it.first;
        }
    }
}

// Method-2
#include<bits/stdc++.h>
int majorityElement(vector<int> v){
    sort(v.begin(),v.end());
    return v[v.size()/2];
}

// Method-3 [ Moore's Voting Algorithm ]
#include <bits/stdc++.h>
int majorityElement(vector<int> v) {
    int count = 0;
    int candidate = 0;
    for (int i = 0; i < v.size(); i++) {
    	if (count == 0) {
		candidate = v[i];
		count++;
	} 
	else if (v[i] == candidate) {
		count++;
	}
	else {
      		count--;
    	}
    }
    count = 0;
    for (int num : v) {
	if (num == candidate) {
		count++;
	}
    }
    if (count > v.size() / 2) {
	return candidate;
    } 
    else {
	return -1;
    }
}

// Leetcode
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0;
        int candidate=0;
        for(int i=0;i<nums.size();i++){
            if(count==0){
                candidate=nums[i];
                count++;
            }
            else if(nums[i]==candidate){
                count++;
            }
            else{
                count--;
            }
        }
        count=0;
        for(int n:nums){
            if(n==candidate){
                count++;
            }
        }
        if(count>nums.size()/2){
            return candidate;
        }
        else{
            return -1;
        }
    }
};

// Kadane's Algorithm, largest sum contiguos subarray		
	
long long maxSubarraySum(vector<int> arr, int n){
    long long sum=0;
    long long maximum =arr[0];
    for(int i=0;i<n;i++){
        sum+=arr[i];
        if(sum<0){
            sum=0;
        }
        maximum=max(maximum,sum);
    }
    return maximum;
}

// Print subarray with maximum subarray sum	

// Method-1
#include <iostream>
#include <vector>
using namespace std;

void SubarrayWithMaxSum(vector<int> nums) {
    int currMax = nums[0], globalMax = nums[0];
    int endIndex = 0;
    int startIndex = 0, globalMaxStartIndex = 0;

    for (int i = 1; i < nums.size(); ++i) {
        if (nums[i] > nums[i] + currMax) {
            currMax = nums[i];
            startIndex = i;
        } else if (nums[i] < nums[i] + currMax) {
            currMax = nums[i] + currMax;
        }

        if (currMax > globalMax) {
            globalMax = currMax;
            endIndex = i;
            globalMaxStartIndex = startIndex;
        }
    }

    for (int i = globalMaxStartIndex; i <= endIndex; ++i) {
        cout << nums[i] << " ";
    }
}
int main() {
    vector<int> arr{ -2, -5, 6, -2, -3, 1, 5, -6 };
    SubarrayWithMaxSum(arr);
    return 0;
}

// Method 2
int longestSubarrayWithSumK(vector<int> &nums, long long targetSum) {
    int right = 0, left = 0;
    int maxSubarrayLength = 0;
    int n = nums.size();
    long long currentSum = 0;
    while (right < n) {
        while (currentSum > targetSum && left <= right) {
            currentSum -= nums[left];
            left++;
        }
        if (currentSum == targetSum) {
            maxSubarrayLength = max(maxSubarrayLength, right - left);
        }
        if (right < n) {
            currentSum += nums[right++];
        }
    }
    int result;
    if (currentSum == targetSum) {
        result = max(maxSubarrayLength, right - left);
    }
    else {
        result = maxSubarrayLength;
    }
    return result;
}

// Stock Buy and Sell		
	
int bestTimeToBuyAndSellStock(vector<int>&prices) {
    int minimum = prices[0];
    int maximumProfit=0;
    for(int i=0;i<prices.size();i++){
        minimum = min(minimum,prices[i]);
        int profit = prices[i] - minimum;
        maximumProfit = max(maximumProfit,profit);
    }
    return maximumProfit;
}

// Rearrange the array in alternating positive and negative items (Not following proper order)	

// Method-1
vector<int> alternateNumbers(vector<int> &a) {
    int n = a.size();
    // Define 2 vectors, one for storing positive and other for negative elements of the array.
    vector<int> pos;
    vector<int> neg;
    // Segregate the array into positives and negatives.
    for (int i = 0; i < n; i++) {
        if (a[i] > 0)
            pos.push_back(a[i]);
        else
            neg.push_back(a[i]);
    }
    // Positives on even indices, negatives on odd.
    for (int i = 0; i < n / 2; i++) {
        a[2 * i] = pos[i];
        a[2 * i + 1] = neg[i];
    }
    return a;
}

// Method-2
vector<int> alternateNumbers(vector<int> &a) {
    int n = a.size();
    // Define array for storing the ans separately.
    vector<int> ans(n, 0);
    // positive elements start from 0 and negative from 1.
    int posIndex = 0, negIndex = 1;
    for (int i = 0; i < n; i++) {
        // Fill negative elements in odd indices and inc by 2.
        if (a[i] < 0) {
            ans[negIndex] = a[i];
            negIndex += 2;
        }
        // Fill positive elements in even indices and inc by 2.
        else {
            ans[posIndex] = a[i];
            posIndex += 2;
        }
    }
    return ans;
}

// Rearrange the array in alternating positive and negative items (Following proper order)	

class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int>ne;
        vector<int>po;
        vector<int>ans;
        for(int i=0; i<nums.size(); i++){
            if(nums[i]>0){
                po.push_back(nums[i]);

            }
            else{
                ne.push_back(nums[i]);
            }
        }
        int k=0;
        int l=0;
        for(int i=0; i<nums.size(); i++){
            if(i%2==0){
                ans.push_back(po[k]);
                k++;
            }
            else{
                ans.push_back(ne[l]);
                l++;
            }
        }
        return ans;
            
    }
};

// Next Permutation		
	
vector<int> nextGreaterPermutation(vector<int> &A) {
    int n=A.size();
    if(n==1){
        return A;
    }
    int idx1=-1;
    for(int i=n-2;i>=0;i--){
        if(A[i]<A[i+1]){
            idx1=i;
            break;
        }
    }
    if(idx1<0){
        reverse(A.begin(),A.end());
    }
    else{
        int idx2=0;
        for(int i=n-1;i>=0;i--){
            if(A[i]>A[idx1]){
                idx2=i;
                break;
            }
        }
        swap(A[idx1],A[idx2]);
        reverse(A.begin()+idx1+1,A.end());
    }
    return A;
}

// Leaders in an Array problem		

vector<int> superiorElements(vector<int> &a) {
    int n = a.size();
    vector<int> v;
    int maximum = 0;
    for (int i = n - 1; i >= 0; i--) {
        if (a[i] > maximum) {
            v.push_back(a[i]);
            maximum = a[i];
        }
    }
    return v;
}

// Longest Consecutive Sequence in an array		
	
// Method-1
int longestSuccessiveElements(vector<int> &arr) {
    int N=arr.size();
    unordered_set<int> s;
    for (int i = 0; i < N; i++){
        s.insert(arr[i]);
    }
    int ans = 0;
    for (int i = 0; i < N; i++){
        if (s.find(arr[i] - 1) != s.end()){
            continue;
        }
        else{
            int count = 0;
            int current = arr[i];
            while (s.find(current) != s.end()){
                count++;
                current++;
            }
            ans = max(ans, count);
        }
    }
    return ans;
}

// Method-2
int longestSuccessiveElements(vector<int>&a) {
    sort(a.begin(),a.end());
    int cnt = 1,ans=INT_MIN,flag = 0;
    for(int i=1;i<a.size();i++){
        if( (a[i] - a[i-1])== 1 ){
            cnt++;
        }
        else if(a[i] == a[i-1]){
            continue;
        }
        else{
            flag=1;
            ans=max(ans,cnt);
            cnt=1;
        }
    }
    if(flag == 0){
        return cnt;
    }
    return ans;
}

// Set Matrix Zeros		
	
#include <bits/stdc++.h> 
vector<vector<int>> zeroMatrix(vector<vector<int>> &matrix, int n, int m) {
    vector<vector<int>>p;
    for(int i=0;i<n;i++{
		for(int j=0;j<m;j++){
        	if(matrix[i][j]==0){
        	    p.push_back({i,j});
    	    }
	    }
    }
    for(int i=0;i<p.size();i++){
        int r=p[i][0],c=p[i][1];
        for(int k=0;k<m;k++){
            matrix[r][k]=0;
        }
        for(int k=0;k<n;k++){
            matrix[k][c]=0;
        }
    }
    return matrix;
}

// Rotate Matrix by 90 degrees		
	
#include<vector>
void rotateMatrix(vector<vector<int>> &mat){
	int r=mat.size();
	for(int i=0;i<r;i++){
		for(int j=i+1;j<r;j++){
			swap(mat[i][j],mat[j][i]);
		}
	}	
	for(int k=0;k<r;k++){
		reverse(mat[k].begin(),mat[k].end());
	}
}

// Print the matrix in spiral manner		
	
vector<int> spiralMatrix(vector<vector<int>>&m) {
    int r=m.size();
    int c=m[0].size();
    int total = r*c;
    int count=0;
    int sr=0;
    int er=r-1;
    int sc=0;
    int ec=c-1;
    vector<int> result;
    while(count<total){
        for(int i=sc;count<total && i<=ec;i++){
            result.push_back(m[sr][i]);
            count++;
        }
        sr++;
        for(int i=sr;count<total && i<=er;i++){
            result.push_back(m[i][ec]);
            count++;
        }
        ec--;
        for(int i=ec;count<total && i>=sc;i--){
            result.push_back(m[er][i]);
            count++;
        }
        er--;
        for(int i=er;count<total && i>=sr;i--){
            result.push_back(m[i][sc]);
            count++;
        }
        sc++;
    }
    return result;
}

// Count subarrays with given sum

// Method-1
int findAllSubarraysWithGivenSum(vector < int > & nums, int k) {
    unordered_map<int,int> mp;
    int sum=0,ans=0;
    mp[sum] = 1;
    for(auto it:nums){
        sum += it;
        int find = sum - k;
        if(mp.find(find) != mp.end()){
            ans += mp[find];
        }
        mp[sum]++;
    }
    return ans;
}

// Method-2
int findAllSubarraysWithGivenSum(vector < int > & arr, int k) {
    int i=0,j=0,n=arr.size(),sum=0,ans=0;
    while(j<n and i<n){
        if(sum<k){
            sum+=arr[j];
            j++;
        }
        else if(sum==k){
            ans++;
            sum-=arr[i];
            i++;
        }
        else{
            sum-=arr[i];
            i++;
        }
    }
    while(i<n){
        if(sum==k){
            ans++;
            break;
        }
        else{
            sum-=arr[i];
        }
        i++;
    }
    return ans;
}

/* Step 3.3: Hard */

// Pascal's Triangle		
	
vector<vector<int>> pascalTriangle(int N) {
    vector<vector<int>> ans(N);
        for(int i=0;i<N;i++){
            for(int j=0;j<i+1;j++){
                if(j==0 || j==i)
                    ans[i].push_back(1);
                else
                    ans[i].push_back(ans[i-1][j]+ans[i-1][j-1]);
            }
        }
    return ans;  
}

// Majority Element (n/3 times)		
	
// Method-1
#include<bits/stdc++.h>
vector<int> majorityElement(vector<int> v) {
    vector<int> ans;
    map<int, int> mp;
    for(int i=0; i<v.size(); i++)
    	mp[v[i]]++;
    for (auto it : mp) {
        if (it.second > v.size() / 3)
        	ans.push_back(it.first);
    }
    return ans;
}

// Method-2
vector<int> majorityElement(vector<int> v) 
{
	vector<int>res;
	int n=v.size();
	int m=n/3;
	sort(v.begin(),v.end());
	int i=0;
	while(i<n)
	{
        int count=1;
		while(v[i]==v[i+1])
		{
			count++;
			i++;
		}
		if(count>m)
		   res.push_back(v[i]);
		i++;
    }
	return res;
}

// Method-3
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int candidate1 = 0, candidate2 = 0, count1 = 0, count2 = 0;
        // First pass to find potential candidates
        for (auto num : nums) {
            if (candidate1 == num){
                count1++;
            }
            else if (candidate2 == num){
                count2++;
            }
            else if (count1 == 0){
                candidate1 = num, count1 = 1;
            }
            else if (count2 == 0){
                candidate2 = num, count2 = 1;
            }
            else{
                count1--;
                count2--;
            }
        }
         // Second pass to verify candidates
        count1 = count2 = 0;
        for (int num : nums) {
            if (num == candidate1){
                count1++;
            }
            else if (num == candidate2){
                count2++;
            }
        }
        vector<int> ans;
        if (count1 > nums.size() / 3) {
            ans.push_back(candidate1);
        }
        if (count2 > nums.size() / 3) {
            ans.push_back(candidate2);
        }
        return ans;
    }
};

// 3-Sum Problem		
	
vector<vector<int>> triplet(int n, vector<int> &arr){
    sort(arr.begin(),arr.end());
    vector<vector<int>> ans;
    for(int i = 0;i<n;i++){
        if(i > 0 && arr[i] == arr[i-1]) continue;
        int j = i+1;
        int k = n-1;
        while(j < k){
            int sum = arr[i] + arr[j] + arr[k];
            if(sum < 0) {
                j++;
            }
            else if(sum >0) {
                k--;
            }
            else{
                ans.push_back({arr[i], arr[j], arr[k]});
                j++;
                k--;
                while (j < k && arr[j] == arr[j - 1]) {
                    j++;
                }
                while (j < k && arr[k] == arr[k + 1]) {
                    k--;
                }
            }
        }
    }
    return ans;
}

// 4-Sum Problem		
	
// Method-1
#include <bits/stdc++.h>
vector<vector<int>> fourSum(vector<int> &nums, int target) {
    int n = nums.size();
    set<vector<int>> st;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                for (int l = k + 1; l < n; l++) {
                    if (nums[i] + nums[j] + nums[k] + nums[l] == target) {
                      vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
                      sort(temp.begin(), temp.end());
                      st.insert(temp);
                    }
                }
            }
        }
    }
    vector<vector<int>> ans(st.begin(), st.end());
    return ans;
};

// Method-2
#include <bits/stdc++.h>
vector<vector<int>> fourSum(vector<int> &nums, int target) {
    int n = nums.size(); // size of the array
    vector<vector<int>> ans;
    // sort the given array:
    sort(nums.begin(), nums.end());
    // calculating the quadruplets:
    for (int i = 0; i < n; i++) {
        // avoid the duplicates while moving i:
        if (i > 0 && nums[i] == nums[i - 1])
            continue;
        for (int j = i + 1; j < n; j++) {
            // avoid the duplicates while moving j:
            if (j > i + 1 && nums[j] == nums[j - 1])
                continue;
            // 2 pointers:
            int k = j + 1;
            int l = n - 1;
            while (k < l) {
                long long sum = nums[i] + nums[j] + nums[k] +nums[l];
                if (sum == target) {
                    ans.push_back({nums[i], nums[j], nums[k], nums[l]});
                    k++;
                    l--;
                    // skip the duplicates:
                    while (k < l && nums[k] == nums[k - 1]) {
                        k++;
                    }
                    while (k < l && nums[l] == nums[l + 1]) {
                        l--;
                    }
                } 
                else if (sum < target) {
                    k++;
                }
                else {
                    l--;
                }
            }
        }
    }
    return ans;
};

// Method-3
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> output;
        for(int i=0; i<n-3; i++){
            for(int j=i+1; j<n-2; j++){
                long long newTarget = (long long)target - (long long)nums[i] - (long long)nums[j];
                int low = j+1, high = n-1;
                while(low < high){
                    if(nums[low] + nums[high] < newTarget){
                        low++;
                    }
                    else if(nums[low] + nums[high] > newTarget){
                        high--;
                    }
                    else{
                        output.push_back({nums[i], nums[j], nums[low], nums[high]});
                        int tempIndex1 = low, tempIndex2 = high;
                        while(low < high && nums[low] == nums[tempIndex1]) low++;
                        while(low < high && nums[high] == nums[tempIndex2]) high--;
                    }
                }
                while(j+1 < n && nums[j] == nums[j+1]) j++;
            }
            while(i+1 < n && nums[i] == nums[i+1]) i++;
        }
        return output;
    }
};

// Largest Subarray with 0 Sum		

#include<bits/stdc++.h>>
int getLongestZeroSumSubarrayLength(vector<int> &arr){
    int maxi = 0 , sum = 0 ;
    unordered_map<int , int> mpp ;
    for(int i = 0 ; i < arr.size() ; i++){
        sum += arr[i] ;
        if(sum == 0){
            maxi = i + 1 ;
        }
        else{
            if(mpp.find(sum) != mpp.end()){
                maxi = max(maxi , i - mpp[sum]);
            }
            else{
                mpp[sum] = i ;
            }
        }
    }
    return maxi ;
}

// Count number of subarrays with given sum	
	
// Method-1
int subarraysWithSumK(vector < int > a, int b) {
    int n = a.size();
    int x;
    int count=0;
    for(int i=0;i<n;i++){
        x=0;
        for(int j=i;j<n;j++){
            x=x^a[j];
            if(x==b){
                count++;
            }
        }
    }
    return count;
}

// Method-2
#include<bits/stdc++.h>
int subarraysWithSumK(vector < int > a, int b) {
    int n = a.size();
    int xr=0;
    int count=0;
    map<int,int> m;
    m[xr]++; // {0,1}
    for(int i=0;i<n;i++){
        xr=xr^a[i];
        int x = b^xr;
        count+=m[x];
        m[xr]++;
    }
    return count;
}

// Merge Overlapping Subintervals		
	
#include<vector>
vector<vector<int>> mergeOverlappingIntervals(vector<vector<int>> &arr){
	int n=arr.size();
	vector<vector<int>> result;
	if(n==0){
		return result;
	}
	sort(arr.begin(),arr.end());
	result.push_back(arr[0]);
	int j=0;
	for(int i=1;i<n;i++){
		if(result[j][1]>=arr[i][0]){
			result[j][1]=max(result[j][1],arr[i][1]);
		}
		else{
			result.push_back(arr[i]);
			j++;
		}
	}
	return result;
}

// Merge two sorted arrays without extra space	
	
// Methdo-1
#include<vector>
void mergeTwoSortedArraysWithoutExtraSpace(vector<long long> &a, vector<long long> &b){
    int n=a.size(),m=b.size();
    int left=n-1,right=0;
    while(left<n and right<m){
        if(a[left]>b[right]){
			swap(a[left],b[right]);
			right++;
			left--;
        }
        else{
            break;
        }
    }
    sort(a.begin(),a.end());
    sort(b.begin(),b.end());
}

// Method-2
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        while(nums1.size()>m){
            nums1.pop_back();
        }
        for(int j=0; j<n; j++){
            nums1.push_back(nums2[j]);
        }
        sort(nums1.begin(), nums1.end());
    }
};

// Find the repeating and missing number		

// Method-1
vector<int> findMissingRepeatingNumbers(vector < int > a) {
    int repeating = -1 , missing = -1 ;
    for(int i = 1 ; i <= a.size() ; i++){
        int count = 0 ;
        for(int j = 0 ; j < a.size() ; j++){
            if(a[j] == i){
                count++;
            }
        }
        if(count == 2){
            repeating = i;
        }
        else if(count == 0){
            missing = i ;
        }
    }
    return {repeating , missing} ;
}

// Method-2
#include <bits/stdc++.h>
vector<int> findMissingRepeatingNumbers(vector<int> a) {
    unordered_map<int, int> umap;
    int n = a.size();
    vector<int> ans;
    int maxi = INT_MIN;
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += a[i];
        maxi = max(maxi, a[i]);
        umap[a[i]]++;
    }
    for (auto u : umap) {
        if (u.second == 2) {
            ans.push_back(u.first);
            sum -= u.first;
        }
    }
    int sumt = maxi * (maxi + 1) / 2;
    if (sum < sumt)
        ans.push_back(sumt - sum);
    if (sumt == sum)
        ans.push_back(maxi + 1);
    return ans;
}

// Method-3
vector<int> findMissingRepeatingNumbers(vector < int > a) {
    long long n = a.size() ;
    long long s = 0 ;
    long long sn = (n*(n+1))/2 ;
    long long s2 = 0 ;
    long long s2n = (n* (n+1) * (2*n+1))/6;
    for(int i = 0 ; i < n ; i++){
        s += a[i];
        s2 += (long long)a[i] * (long long)a[i] ;
    }
    long long val1 = s - sn ;
    long long val2 = s2 - s2n ;
    val2 = val2 / val1 ;
    long long x = (val1 + val2) / 2 ;
    long long y = (val2 - x) ;
    return {(int)x ,(int)y};
}

// Count Inversions		

// Method-1
#include<bits/stdc++.h> 
int numberOfInversions(vector<int>&a, int n) {    
   int count=0;
   for(int i=0;i<n;i++){
       for(int j=i+1;j<n;j++){
           if(a[i]>a[j]){
               count++;
           }        
       }    
    }    
    return count;
}  

// Method-2
int merge(vector<int> &arr, int low, int mid, int high) {
    vector<int> temp; // temporary array
    int left = low;      // starting index of left half of arr
    int right = mid + 1;   // starting index of right half of arr
    //storing elements in the temporary array in a sorted manner//
    int cnt = 0;
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            cnt += (mid-left) + 1;
            right++;
        }
    }
    // if elements on the left half are still left //
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }
    // if elements on the right half are still left //
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }
    // transfering all elements from temporary to arr //
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
    return cnt;
}
int mergeSort(vector<int> &arr, int low, int high) {
    int cnt = 0;
    if (low >= high) return cnt;
    int mid = (low + high) / 2 ;
    cnt += mergeSort(arr, low, mid);  // left half
    cnt += mergeSort(arr, mid + 1, high); // right half
    cnt += merge(arr, low, mid, high);  // merging sorted halves
    return cnt;
}
int numberOfInversions(vector<int>&a, int n) {
    return mergeSort(a, 0, n-1);
}

// Reverse Pairs		
	
// Method-1
class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        long long reversePairsCount = 0;
        for(int i=0; i<n-1; i++){
            for(int j=i+1; j<n; j++){
                if(nums[i] > 2*(long long)nums[j]){
                    reversePairsCount++;
                }
            }
        }
        return reversePairsCount;
    }
};

// Method-2
void merge(vector<int> &arr, int low, int mid, int high) {
    vector<int> temp; // temporary array
    int left = low;      // starting index of left half of arr
    int right = mid + 1;   // starting index of right half of arr

    //storing elements in the temporary array in a sorted manner//

    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    // if elements on the left half are still left //

    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    //  if elements on the right half are still left //
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    // transfering all elements from temporary to arr //
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}

int countPairs(vector<int> &arr, int low, int mid, int high) {
    int right = mid + 1;
    int cnt = 0;
    for (int i = low; i <= mid; i++) {
        while (right <= high && arr[i] > 2 * arr[right]) right++;
        cnt += (right - (mid + 1));
    }
    return cnt;
}

int mergeSort(vector<int> &arr, int low, int high) {
    int cnt = 0;
    if (low >= high) return cnt;
    int mid = (low + high) / 2 ;
    cnt += mergeSort(arr, low, mid);  // left half
    cnt += mergeSort(arr, mid + 1, high); // right half
    cnt += countPairs(arr, low, mid, high); //Modification
    merge(arr, low, mid, high);  // merging sorted halves
    return cnt;
}

int team(vector <int> & skill, int n)
{
    return mergeSort(skill, 0, n - 1);
}

// Maximum Product Subarray

#include<bits/stdc++.h>
int subarrayWithMaxProduct(vector<int> &arr){
	int n=arr.size();
	long long prod=1;
	long long maxProd=INT_MIN;
	for(int i=0;i<n;i++){
		prod*=arr[i];
		if(prod==0){
			prod=1;
		}
		maxProd=max(maxProd,prod);
	}
	prod=1;
	for(int i=n-1;i>=0;i--){
		prod*=arr[i];
		if(prod==0){
			prod=1;
		}
		maxProd=max(maxProd,prod);
	}
	return maxProd;
}
