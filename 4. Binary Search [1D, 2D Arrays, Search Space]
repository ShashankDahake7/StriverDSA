/* Step 4.1: BS on 1D Arrays */

// Binary Search to find X in sorted array 

// Method-1
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left=0;
        int right=nums.size()-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]<target){
                left=mid+1;
            }
            else{
                right=mid-1;                
            }
        }
        return -1;
    }
};

// Method-2
int BinarySearch(int arr[],int s,int e,int k){
    int mid=s+(e-s)/2;
    if(s>e){
        return -1;
    }
    if(arr[mid]==k){
        return mid;
    }
    if(arr[mid]<k){
        return BinarySearch(arr, mid+1, e, k);
    }
    else{
        return BinarySearch(arr,s,mid-1,k);
    }
}
int binarySearch(int *input, int n, int val){
    int ans=BinarySearch(input, 0, n-1, val);
    return ans;
}

// Implement Lower Bound		

int lowerBound(vector<int> arr, int n, int x) {
	int left=0;
	int right=n-1;
	int ans=n;
	while(left<=right){
	  int mid=left+(right-left)/2;
		if(arr[mid]>=x){
			ans=mid;
			right=mid-1;
		}
		else{
			left=mid+1;
		}
	}
	return ans;
}

// Implement Upper Bound		

int upperBound(vector<int> &arr, int x, int n){
	int left=0;
	int right=n-1;
	int ans=n;
	while(left<=right){
		int mid=left+(right-left)/2;
		if(arr[mid]>x){
			ans=mid;
			right=mid-1;
		}
		else{
			left=mid+1;			
		}
	}	
	return ans;
}

// Search Insert Position		
	
int searchInsert(vector<int>& arr, int x) {
    int n = arr.size();
    int left = 0, right = n - 1;
    int ans = n;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (arr[mid] >= x){
            ans = mid;
            right = mid - 1;
        }
        else {
            left = mid + 1;
        }
    }
    return ans;
}

// Floor/Ceil in Sorted Array		

#include <bits/stdc++.h>
pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
    pair<int, int>p;
    int left=0, right=a.size()-1, floor=-1, ceil=-1;
    while(left<=right){
        int mid=left+(right-left)/2;
        if(a[mid]==x){
            floor=a[mid];
            ceil=a[mid];
            break;
        }
        else if(a[mid]<=x){
            floor=a[mid];
            left=mid+1;
        }
        else if(a[mid]>=x){
            ceil=a[mid];
            right=mid-1;
        }
    }
    return {floor, ceil};
}

// Find the first or last occurrence of a given number in a sorted array	
	
#include <bits/stdc++.h> 
int FirstOccurence(vector<int>& arr, int n, int k){
    int left=0,right=n-1,mid=left+(right-left)/2;
    int ans=-1;
    while(left<=right){
        if(arr[mid]<k){
            left=mid+1;
        }
        else if(arr[mid]==k){
            ans=mid;
            right=mid-1;
        }
        else{
            right=mid-1;
        }
        mid=left+(right-left)/2;
    }
    return ans;
}
int LastOccurence(vector<int>& arr, int n, int k){
    int left=0,right=n-1,mid=left+(right-left)/2;
    int ans=-1;
    while(left<=right){
        if(arr[mid]<k){
            left=mid+1;
        }
        else if(arr[mid]==k){
            ans=mid;
            left=mid+1;
        }
        else{
            right=mid-1;
        }
        mid=left+(right-left)/2;
    }
    return ans;
}
pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k){
    pair<int,int> p;
    p.first=FirstOccurence(arr,n,k);
    p.second=LastOccurence(arr,n,k);
    return p;
}

// Count occurrences of a number in a sorted array with duplicates		

int FirstOccurence(vector<int>& arr, int n, int k){
    int left=0,right=n-1,mid=left+(right-left)/2;
    int ans=0;
    while(left<=right){
        if(arr[mid]<k){
            left=mid+1;
        }
        else if(arr[mid]==k){
            ans=mid;
            right=mid-1;
        }
        else{
            right=mid-1;
        }
        mid=left+(right-left)/2;
    }
    return ans;
}
int LastOccurence(vector<int>& arr, int n, int k){
    int left=0,right=n-1,mid=left+(right-left)/2;
    int ans=-1;
    while(left<=right){
        if(arr[mid]<k){
            left=mid+1;
        }
        else if(arr[mid]==k){
            ans=mid;
            left=mid+1;
        }
        else{
            right=mid-1;
        }
        mid=left+(right-left)/2;
    }
    return ans;
}
int count(vector<int>& arr, int n, int x) {
	int first= FirstOccurence(arr,n,x);
    int last = LastOccurence(arr, n, x);
    return (last-first+1);
}

// Search in Rotated Sorted Array I		
	
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int left=0;
        int right=n-1;
        int mid=left+(right-left)/2;
        while(left<=right){
             mid=left+(right-left)/2;
             if(nums[mid]==target){
                return mid;    
             } 
             if(nums[left]<=nums[mid]){
                 if(nums[left]<=target && target<=nums[mid]){
                     right=mid-1;
                 }
                 else{ 
                     left=mid+1;
                 }
             }
             else{
                if(nums[mid]<=target && target<=nums[right]){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
             }
        }
        return -1;
    }
};

// Search in Rotated Sorted Array II		
	
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int n=nums.size();
        int left=0;
        int right=n-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target){
                return true;
            }
            else if(nums[left]==nums[mid] && nums[right]==nums[mid]){
                left++;
                right--;
                continue;
            }
            else if(nums[left]<=nums[mid]){
                if(nums[left]<=target && target<=nums[mid]){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
            else{
                if(nums[mid]<=target && target<=nums[right]){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
        }
        return false;
    }
};

// Find minimum in Rotated Sorted Array
	
int findMin(vector<int>& arr){
    int n=arr.size();
    int left = 0;
    int right =n-1;
    int ans=INT_MAX;
    while(left<=right){
        int mid = left +(right-left)/2;
		    // right half sorted
        if(arr[left]>arr[mid]) {
            ans=min(ans,arr[mid]);
            right=mid-1;
        } 
		    // left half is sorted 
        else if(arr[left]<=arr[mid]){
            ans=min(ans ,arr[left]);
            left=mid+1;
        }
    }
    return ans;
}

// Find out how many times has an array been rotated

int findKRotation(vector<int> &arr){
    int left=0;
    int right=arr.size()-1;
    int mid;
    if(arr[left]<=arr[right]){
        return 0;
    }
    while(left<=right){
        int mid=left+(right-left)/2;
        if(arr[mid+1]<arr[mid]){
            return mid+1;
        }
        else if(arr[mid]>=arr[left]){
            left=mid+1;
        }
        else{
            right=mid-1;
        }
    }
    return mid+1;
}

// Single element in a Sorted Array		
	
int singleNonDuplicate(vector<int>& arr){
    int left = 0 ;
    int right = arr.size() - 2;
    while(left<=right){
        int mid = left+(right-left)/2;
        if(mid%2!=0){
            if(arr[mid] == arr[mid-1]){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
		}
        else{
            if(arr[mid] == arr[mid+1]){
				left = mid+1;
			}
            else{
				right = mid-1;
			}
        }
    }
    return arr[left];
}

// Find peak element

int findPeakElement(vector<int> &arr) {
    int n=arr.size();
    int left=0;
    int right=n-1;
    while(left<=right){
        int mid= left+ (right-left)/2;
        if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]){
            return mid;
        }
        else if(arr[mid]<arr[left]){
            right=mid-1;
        }
        else{
            left=mid+1;
        }
    }
}

/* Step 4.2: BS on Answers */

// Find square root of a number in logN

#include <bits/stdc++.h> 
int sqrtN(long long int N){
    if(N < 2){
        return N;
    }
    long long int left = 0, right = N;
    long long ans = -1;
    while (left <= right){
        long long int mid = left + (right - left) / 2;
        // same as mid*mid == N, to avoid range overlow
        if (mid  == (N/mid)){
            return mid;
        }
        else if (mid > (N/mid)){
            right = mid - 1;
        }
        else{
            ans = mid;
            left = mid + 1;
        }
    }
    return ans;
}

// Find the Nth root of a number using binary search

#include<bits/stdc++.h>
int NthRoot(int n, int m) {
  int left =1;
  int right = m;
  while(left<=right){
    long long mid = (left+right)/2;
    if(pow(mid,n)==m){
      return mid;
    }
    else if (pow(mid,n)>m){
      right = mid-1;
    }
    else{
      left = mid+1;
    }
  }
  return -1;
}

// Koko Eating Bananas		
	
class Solution {
public:
    long long getHoursToEatAll(vector<int>&piles, int bananasPerHour){
        long long totalHours = 0;
        for (int i = 0; i < piles.size(); i++){
            int hoursToEatPile = ceil(piles[i] / (double)bananasPerHour);
            totalHours += hoursToEatPile;
        }
        return totalHours;
    }
    int minEatingSpeed(vector<int>& piles, int targetHours){
        int low = 1, high = *(max_element(piles.begin(), piles.end()));
        int ans = -1;
        while(low <= high){
            int mid = low + (high - low) / 2;
            long long hoursToEatAll = getHoursToEatAll(piles, mid);
            if (hoursToEatAll <= targetHours){
                ans = mid;
                high = mid - 1;
            }
            else low = mid + 1;
        }
        return ans;
    }
};

// Minimum days to make M bouquets		

// Coding Ninjas
#include<bits/stdc++.h>
using namespace std;
int mini(vector<int> &arr,int n){
    int ans=INT_MAX;
    for(int i=0;i<n;i++){
        ans= min(ans, arr[i]);
    }
    return ans;
}
int maxi(vector<int> &arr, int n){
    int ans= INT_MIN
    for(int i=0;i<n;i++){
        ans= max(ans, arr[i]);
    }
    return ans;
}
bool func(vector<int> &arr, int n, int k, int h, int mid){
    int total=0;
    int count=0;
    for(int i=0;i<n;i++){
        if(arr[i]<=mid){
            count++;
        }
        else{
            total+=count/k;
            count=0;
        }
    }
    total+=count/k;
    return total>=h;
}
int roseGarden(vector<int> arr, int k, int m){
    int n=arr.size();
    int low=mini(arr, n);
    int high =maxi(arr,n);
    int ans=-1;
    while(low<=high){
        int mid= low+(high-low)/2;
        if(func(arr, n, k ,m,mid)){
            ans= mid;
            high =mid-1;
        }
        else{
            low= mid+1;
        }
    }
    return ans;
}

// Leetcode
// Method-1
class Solution {
public:
    void arrayMinMax(vector<int> &bloomDay,int &minElement,int &maxElement){
        for(int i=0;i<bloomDay.size();i++){
            if(bloomDay[i]<minElement){
                minElement=bloomDay[i];
            }
            if(bloomDay[i]>maxElement){
                maxElement=bloomDay[i];
            }
        }
    }
    bool isPossible(vector<int> &bloomDay,int days,int m,int k){
        int count=0,numOfBouq=0;
        for(int i=0;i<bloomDay.size();i++){
            if(bloomDay[i]<=days){
                count++;
            }
            else{
                numOfBouq+=count/k;
                count=0;
            }
        }
        numOfBouq+=count/k;
        return numOfBouq>=m;
    }
    int minDays(vector<int>& bloomDay, int m, int k) {
        int minDays=INT_MAX,maxDays=INT_MIN;
        arrayMinMax(bloomDay,minDays,maxDays);
        for(int i=minDays;i<=maxDays;i++){
            if(isPossible(bloomDay,i,m,k)){
                return i;
            }
        }
        return -1;
    }
};

// Method-2
class Solution {
public:
    void arrayMinMax(vector<int> &bloomDay,int &minElement,int &maxElement){
        for(int i=0;i<bloomDay.size();i++){
            if(bloomDay[i]<minElement){
                minElement=bloomDay[i];
            }
            if(bloomDay[i]>maxElement){
                maxElement=bloomDay[i];
            }
        }
    }
    bool isPossible(vector<int> &bloomDay,int days,int m,int k){
        int count=0,numOfBouq=0;
        for(int i=0;i<bloomDay.size();i++){
            if(bloomDay[i]<=days){
                count++;
            }
            else{
                numOfBouq+=count/k;
                count=0;
            }
        }
        numOfBouq+=count/k;
        return numOfBouq>=m;
    }
    int minDays(vector<int> &bloomDay,int m,int k){
        // Edge case
        long long val=m*1ll*k*1ll;
        int n=bloomDay.size();
        if(val>n){
            return -1;
        }

        int low=INT_MAX,high=INT_MIN;
        arrayMinMax(bloomDay,low,high);
        while(low<=high){
            int mid=low+(high-low)/2;
            if(isPossible(bloomDay,mid,m,k)){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return low;
    }
};

// Find the smallest Divisor		
	
class Solution {
public:
    int SumOfDivisor(vector<int>& nums, int Day){
        int sum = 0;
        for(int i = 0;i<nums.size();i++){
            sum += ceil((double)nums[i]/(double)(Day));
        }
        return sum;
    }
    int smallestDivisor(vector<int>& nums, int threshold) {
        int maxi = INT_MIN;
        for(int i = 0;i<nums.size();i++){
            maxi = max(maxi,nums[i]);
        }
        int low = 1,high = maxi,ans = -1;
        while(low <= high){
            int mid = (low + high)/2;
            if(SumOfDivisor(nums,mid) <= threshold){
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return ans;
    }
};

// Capacity to Ship Packages within D Days	
	
bool isPossible(vector<int> &arr, int d,int mid){
    int dayCnt=1;
    int total_weight=0;
    for(int i=0;i<arr.size();i++){
        if(mid>=arr[i] && (total_weight+arr[i])<=mid){
            total_weight+=arr[i];
        }
        else{
            if(mid<arr[i]){
                return false;
            }
            dayCnt++;
            if(dayCnt>d){
                return false;
            }
            total_weight=arr[i];
        }
    }
    return true;
}
int leastWeightCapacity(vector<int> &arr, int d){
    int s=0;
    int e=0;
    int n=arr.size();
    for(int i=0;i<n;i++){
        if(arr[i]<s){
            s=arr[i];
        }
        e+=arr[i];
    }
    int total_weight=e;
    int ans=-1;
    while(s<=e){
        int mid=s+(e-s)/2;
        if(isPossible(arr,d,mid)){
            ans=mid;
            e=mid-1;
        }
        else{
            s=mid+1;
        }
    }
    return ans;
}

// Kth Missing Positive Number		
	
int missingK(vector < int > arr, int n, int k) {
    int low =0;
    int high = n-1;
    while(low<=high){
        int mid= (low+high)/2;
        int missing = arr[mid] - (mid+1);
        if(missing<k){
            low=mid+1;
        }
        else{
            high = mid-1;
        }
    }
    // return low+k;
    return high+1+k;
}

// Aggressive Cows		
	
bool isPossible(vector<int> &stalls, int k, int mid, int n) {
    int cowCount = 1;
    int lastPos = stalls[0];
    for(int i=0; i<n; i++ ){
        if(stalls[i]-lastPos >= mid){
            cowCount++;
            if(cowCount==k){
                return true;
            }
            lastPos = stalls[i];
        }
    }
    return false;
}
int aggressiveCows(vector<int> &stalls, int k){
    sort(stalls.begin(), stalls.end());
   	int s = 0;
    int n = stalls.size();
    int e=stalls[n-1];
    int ans = -1;
    int mid = s + (e-s)/2;
    while(s<=e) {
        if(isPossible(stalls, k, mid, n)) {
            ans = mid;
            s = mid + 1;
        }
        else{
            e = mid - 1;
        }
        mid = s + (e-s)/2;
    }
    return ans;
}

// Book Allocation Problem		
	
bool isPossible(vector<int>& arr, int n, int m, int mid){
    int student = 1;
    int pageSum = 0;
    for(int i = 0; i<n; i++){
        if(pageSum+arr[i] <= mid){
            pageSum += arr[i];
        }
        else{
            student++;
            if(student > m|| arr[i] > mid){
                return false;
            }
            pageSum = arr[i];
        }
    }
    return true;
}
int findPages(vector<int>& arr, int n, int m) {
    if(m>n){
        return -1;
    }
    int s = 0;
    int sum = 0;
    for(int i = 0; i<n; i++){
        sum += arr[i];
    }
    int e = sum;
    int mid = s + (e-s)/2;
    int ans = -1;
    while(s<=e){
        if(isPossible(arr, n, m, mid)){
            ans = mid;
            e = mid - 1;
        }
        else {
            s = mid + 1;
        }
        mid = s + (e-s)/2;
    }
    return ans;
}

// Split array - Largest Sum		
	
int findsubarrayk(vector<int> a, int mid) {
    int sumarray=0;
    int countk=1;
    for(int i=0;i<a.size();i++) {
        if(sumarray+a[i]<=mid) {
            sumarray+=a[i];
        }
        else {
            countk++;
            sumarray=a[i];
        }
    }
    return countk;
}
int largestSubarraySumMinimized(vector<int> a, int k) {
    int low=*max_element(a.begin(),a.end());
    int high=accumulate(a.begin(),a.end(),0);
    while(low<=high) {
        int mid=(low+high)/2;
        int cntk=findsubarrayk(a,mid);
        if(cntk>k){
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
    return low;
}

// Painter's partition		

bool isPossible(vector<int> &boards, int n, int k, int mid) {
  int PainterCount = 1;
  int blockCount = 0;
  for (int i = 0; i < n; ++i) {
    if (blockCount + boards[i] <= mid) {
      blockCount += boards[i];
    } 
    else {
      PainterCount++;
      if (PainterCount > k || boards[i] > mid) {
        return false;
      }
      blockCount = boards[i];
    }
  }
  return true;
}
int findLargestMinDistance(vector<int> &boards, int k) {
  int n = boards.size();
  int s = 0;
  int sum = 0;
  for (int i = 0; i < n; ++i) {
    sum += boards[i];
  }
  int e = sum;
  int ans = -1;
  int mid = s + (e - s) / 2;
  while (s <= e) {
    if (isPossible(boards, n, k, mid)) {
      ans = mid;
      // Left wale bhaag jaenge
      e = mid - 1;
    } 
    else {
      s = mid + 1;
    }
    mid = s + (e - s) / 2;
  }
  return ans;
}

// Minimize Max Distance to Gas Station		

// Method-1
long double minimiseMaxDistance(vector<int> &arr, int k) {
    int n = arr.size();
    vector<int> howMany(n - 1, 0);
    priority_queue<pair<long double, int>> pq;
    // insert the first n-1 elements into pq with respective distance values:
    for (int i = 0; i < n - 1; i++) {
        pq.push({arr[i + 1] - arr[i], i});
    }
    // Pick and place k gas stations:
    for (int gasStations = 1; gasStations <= k; gasStations++) {
        // Find the maximum section and insert the gas station:
        auto tp = pq.top();
        pq.pop();
        int secInd = tp.second;
        //insert the current gas station:
        howMany[secInd]++;
        long double inidiff = arr[secInd + 1] - arr[secInd];
        long double newSecLen = inidiff / (long double)(howMany[secInd] + 1);
        pq.push({newSecLen, secInd});
    }
    return pq.top().first;
}

// Method-2
int numberOfGasStationsRequired(long double dist, vector<int> &arr) {
    int n = arr.size();
    int cnt = 0;
    for (int i = 1; i < n; i++) {
        int numberInBetween = ((arr[i] - arr[i - 1]) / dist);
        if ((arr[i] - arr[i - 1]) == (dist * numberInBetween)) {
            numberInBetween--;
        }
        cnt += numberInBetween;
    }
    return cnt;
}
double minimiseMaxDistance(vector<int> &arr, int k){
	int n = arr.size(); 
    long double low = 0;
    long double high = 0;
    //Find the maximum distance:
    for (int i = 0; i < n - 1; i++) {
        high = max(high, (long double)(arr[i + 1] - arr[i]));
    }
    long double diff = 1e-6 ;
    while (high - low > diff) {
        long double mid = (low + high) / (2.0);
        int cnt = numberOfGasStationsRequired(mid, arr);
        if (cnt > k) {
            low = mid;
        }
        else {
            high = mid;
        }
    }
    return high;
}

// Median of 2 sorted arrays		
	
class Solution {
public:
    double findMedianSortedArrays(vector<int>& a, vector<int>& b) {
        int n1 = a.size(), n2 = b.size();
        // if n1 is bigger swap the arrays:
        if (n1 > n2){
            return findMedianSortedArrays(b, a);
        }
        int n = n1 + n2;
        int left = (n1 + n2 + 1) / 2; // length of left half
        int low = 0, high = n1;
        while (low <= high) {
            int mid1 = (low + high) >> 1;
            int mid2 = left - mid1;
            int l1 = INT_MIN, l2 = INT_MIN;
            int r1 = INT_MAX, r2 = INT_MAX;
            if (mid1 < n1){
                r1 = a[mid1];
            }
            if (mid2 < n2){
                r2 = b[mid2];
            }
            if (mid1 - 1 >= 0){
                l1 = a[mid1 - 1];
            }
            if (mid2 - 1 >= 0){
                l2 = b[mid2 - 1];
            }
            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 1){
                    return max(l1, l2);
                }
                else{
                    return ((double)(max(l1, l2) + min(r1, r2))) / 2.0;
                }
            }
            // eliminate the halves:
            else if (l1 > r2){
                high = mid1 - 1;
            }
            else{
                low = mid1 + 1;
            }
        }
        return 0;
    }
};

// Kth element of 2 sorted arrays

// Method-1
int kthElement(vector<int> &arr1, vector<int>& arr2, int n, int m, int k){
    int i=0,j=0,ans;
    for(int cnt=0;cnt<k;cnt++){
        if(arr1[i]<=arr2[j]){
            ans=arr1[i++];
        }        
        else{
            ans=arr2[j++];
        }
    }
    return ans;
}

// Method-2 (TLE on CN)
int kthElement(vector<int> &arr1, vector<int>& arr2, int n, int m, int k){
   if(m > n) {
        return kthElement(arr2, arr1, n, m, k); 
    }
    int low = max(0,k-m), high = min(k,n);   
    while(low <= high) {
        int cut1 = (low + high) >> 1; 
        int cut2 = k - cut1; 
        int l1 = cut1 == 0 ? INT_MIN : arr1[cut1 - 1]; 
        int l2 = cut2 == 0 ? INT_MIN : arr2[cut2 - 1];
        int r1 = cut1 == n ? INT_MAX : arr1[cut1]; 
        int r2 = cut2 == m ? INT_MAX : arr2[cut2]; 
        if(l1 <= r2 && l2 <= r1) {
            return max(l1, l2);
        }
        else if (l1 > r2) {
            high = cut1 - 1;
        }
        else {
            low = cut1 + 1; 
        }
    }
    return 1; 
}

/* Step 4.3: BS on 2D Arrays */

// Find the row with maximum number of 1s	

// Method-1
int rowWithMax1s(vector<vector<int>> &matrix, int n, int m){
    int maxcount=0;
    int max1s=-1;
    for(int i=0;i<n;i++){
        int cnt=0;
        for(int j=0;j<m;j++){
	    if(matrix[i][j]==1){
            	cnt+= matrix[i][j];
            }
	}
        if (cnt > maxcount) {
            maxcount = cnt;
            max1s = i;
        }
    }
    return max1s;
}

// Method-2
int lowerbound(vector<int> arr, int n, int x){
    int l=0;
    int h= n-1;
    int ans=n;
    while (l <= h) {
        int mid = (l + h) / 2;
        if (arr[mid] >= x) {
            ans = mid;
            h=mid-1;
        }
        else {
            l = mid + 1;
        }
    }
    return ans;
}
int rowWithMax1s(vector<vector<int>> &matrix, int n, int m){
    int maxcount=0;
    int max1s=-1;
    for(int i=0;i<n;i++){
        int cnt = m-lowerbound(matrix[i], m, 1 );
        if (cnt > maxcount) {
            maxcount = cnt;
            max1s = i;
        }
    }
    return max1s;
}

// Search in a 2D matrix		
	
bool searchMatrix(vector<vector<int>>& matrix, int target) {
    int row=matrix.size();
    int col=matrix[0].size();
    int start=0,end=(row*col)-1,mid=start+(end-start)/2;
    while(start<=end){
        int element=matrix[mid/col][mid%col];
        if(element<target){
            start=mid+1;
        }
        else if(element==target){
            return 1;
        }
        else{
            end=mid-1;
        }
        mid=start+(end-start)/2;
    }
    return 0;    
}

// Search in a row and column wise sorted	
	
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();
        int RowIndex=0;
        int ColIndex=col-1;
        while(RowIndex<row && ColIndex>=0){
            int element=matrix[RowIndex][ColIndex];
            if(element<target){
                RowIndex++;
            }
            else if(element==target){
                return 1;
            }
            else{
                ColIndex--;
            }
        }
        return 0;
    }
};

// Find Peak Element (2D Matrix)		
	
vector<int> findPeakGrid(vector<vector<int>> &mat) {
    int n = mat.size();
    int m = mat[0].size();
    int low = 0, high = m - 1;
    while (low <= high) {
        int maxRow = 0;
        int midCol = (low + high) / 2;
        for (int row = 0; row < n; row++) {
            if (mat[row][midCol] > mat[maxRow][midCol]) {
                maxRow = row;
            }
        }
        int currElement = mat[maxRow][midCol];
        int leftElement = -1;
        if (midCol > 0) {
            leftElement = mat[maxRow][midCol - 1];
        }
        int rightElement = -1;
        if (midCol < m - 1) {
            rightElement = mat[maxRow][midCol + 1];
        }
        if (currElement > leftElement && currElement > rightElement) {
            return {maxRow, midCol};
        } 
        else {
            if (currElement < leftElement) {
                high = midCol - 1;
            }
            else {
                low = midCol + 1;
            }
        }
    }
    return {-1, -1};
}

// Matrix Median

// Method-1
int median(vector<vector<int>> &matrix, int m, int n) {
    vector<int> ans;
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            ans.push_back(matrix[i][j]);
        }
    }
    sort(ans.begin(),ans.end());
    int s = 0;
    int e = ans.size()-1;
    int mid = s+(e-s)/2;
    return ans[mid];

}

// Method-2
int upperBound(vector<int>& arr, int x, int n){
    int low = 0;
    int high = n-1;
    int ans = n;
    while(low <= high){
        int mid = (low + high)/2;
        if(arr[mid] > x){
            ans = mid;
            high = mid-1;
        }
        else{
            low = mid + 1;
        }
    }
    return ans;
}
int countSmallEqual(vector<vector<int>>&matrix, int n, int m, int x){
    int count = 0;
    for (int i = 0; i < n; i++) {
        count += upperBound(matrix[i], x, m);
    }
    return count;
}
int median(vector<vector<int>> &matrix, int m, int n) {
    int low = INT_MAX;
    int high = INT_MIN;
    for(int i = 0; i < m; i++){
        low = min(low, matrix[i][0]);
        high = max(high, matrix[i][n-1]);
    }
    int req = (m*n)/2;
    while(low <= high){
        int mid = (low + high) /2;
        int smallEqual = countSmallEqual(matrix, m, n, mid);
        if(smallEqual <= req){ 
            low = mid + 1;
        }
        else{
            high = mid-1;
        }
    }
    return low;
}
