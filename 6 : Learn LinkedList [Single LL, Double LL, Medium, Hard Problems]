// Step 6.1: Learn 1D LinkedList

// Introduction to Linked list

/**
 * Definition of linked list
 * class Node {
 *
 * public:
 *     int data;
 *     Node* next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node* next) : data(x), next(next) {}
 * };
 */

Node* constructLL(vector<int>& arr) {
    if(arr.size()==0){
        return NULL;
    }
    Node *head=new Node(arr[0]);
    Node *temp=head;
    for(int i=1;i<arr.size();i++){
        Node *newNode=new Node(arr[i]);
        temp->next=newNode;
        temp=temp->next;
    }
    return head;
}

// Inserting a node in LinkedList

Node* insertAtFirst(Node* list, int newValue) {
    Node *temp=new Node(newValue);
    temp->next=list;
    list=temp;
}

// Deleting a node in LinkedList

// Coding Ninja
Node *deleteLast(Node *list){
    Node *temp=list;
    while(temp->next->next!=NULL){
        temp=temp->next;
    }
    temp->next=NULL;
    return list;
}

// Leetcode
void deleteNode(ListNode* node) {
  node->val = node->next->val;
  ListNode* k = node->next;
  node->next = node->next->next;
  delete(k);
}

// Find the length of the linkedlist [ Learn Traversal ]

int length(Node *head){
    int count=0;
   Node *temp=head;
    while(temp!=NULL){
        count++;
        temp=temp->next;
    }
    return count;
}

// Search an element in the LL

int searchInLinkedList(Node<int> *head, int k) {
    Node<int> *temp=head;
    while(temp!=NULL){
        if(temp->data==k){
            return 1;
        }
        temp=temp->next;
    }
    return 0;
}

// Step 6.2: Learn Doubly List

// Introduction to DLL, learn about struct and how node is represented	

/*
 * Definition for doubly-linked list.
 * class Node
 * {
 * public:
 *    int data;
 *    Node *next, *prev;
 *    Node() : data(0), next(nullptr), prev(nullptr) {}
 *    Node(int x) : data(x), next(nullptr), prev(nullptr) {}
 *    Node(int x, Node *next, Node *prev) : data(x), next(next), prev(prev) {}
 * };
 */

Node* constructDLL(vector<int>& arr) {
    if(arr.size()==0){
        return NULL;
    }
    Node *head=new Node(arr[0]);
    Node *temp=head;
    for(int i=1;i<arr.size();i++){
        Node *newNode=new Node(arr[i]);
        temp->next=newNode;
        newNode->prev=temp;
        temp=temp->next;
    }
    return head;
}

// Insert a node in DLL				

Node * insertAtTail(Node *head, int k) {
    Node *newNode=new Node(k);
    if(head==NULL){
        head=newNode;
        return head;
    }
    Node *temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=newNode;
    newNode->prev=temp;
    return head;
}

// Delete a node in DLL				

Node *deleteLastNode(Node *head) {
    if (head == NULL){
        return NULL;
    }
    if (head->next == NULL){
        return NULL;
    }
    Node* temp = head;
    while(temp -> next != NULL){
        temp = temp -> next;
    }
    Node* t = temp;
    temp -> prev -> next = NULL;
    delete temp;
    return head;
}

// Reverse a DLL

Node* reverseDLL(Node* head){   
    if(head==NULL || head->next==NULL){
        return head;
    }
    Node *curr=head;
    Node *prev=NULL;
    Node *forw=NULL;
    while(curr!=NULL){
        forw=curr->next;
        curr->next=curr->prev;
        curr->prev=forw;
        prev=curr;
        curr=curr->prev;
    }
    head=prev;
    return head;
}

// Step 6.3: Medium Problems of LL

// Middle of a LinkedList [TortoiseHare Method]
	
// Method-1
int getLength(Node *head){
    int count=0;
    while(head){
        count++;
        head=head->next;
    }
    return count;
}
Node *findMiddle(Node *head) {
    int n=getLength(head);
    int t=n/2;
    Node *temp=head;
    while(t--){
        temp=temp->next;
    }
    return temp;
}

// Method-2
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        if(head->next->next==NULL){
            return head->next;
        }
        ListNode *slow=head;
        ListNode *fast=head->next;
        while(fast!=NULL){
            fast=fast->next;
            if(fast!=NULL){
                fast=fast->next;
            }
            slow=slow->next;
        }
        return slow;
    }
};

// Reverse a LinkedList [Iterative]		
	
Node* reverseLinkedList(Node *head){
    Node *curr=head;
    Node *prev=NULL;
    Node *forw=NULL;
    while(curr!=NULL){
        forw=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forw;
    }
    head=prev;
    return head;
}

// Reverse a LL [Recursive]		
	
Node* reverseLinkedList(Node *head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    Node *newNode=reverseLinkedList(head->next);
    head->next->next=head;
    head->next=NULL;
    return newNode;
}

// Detect a loop in LL		
	
bool detectCycle(Node *head){
    if(head==NULL || head->next==NULL){
        return false;
    }
    Node *slow=head;
    Node *fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
        if(fast==slow){
            return true;
        }
    }
    return false;
}

// Find the starting point in LL		
	
class Solution {
 public:
    ListNode* detectCycle(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast!=NULL && fast->next!=NULL) {
             slow = slow->next;
             fast = fast->next->next;
             if (slow == fast) {
                // If the pointers meet, there is a cycle in the linked list.
                // Reset the slow pointer to the head of the linked list, and move both pointers one step at a time
                // until they meet again. The node where they meet is the starting point of the cycle.
                slow = head;
                while (slow != fast) {
                    slow = slow->next;
                    fast = fast->next;
                }
                return slow;
             }
        }
        return nullptr;
    }
};

// Length of Loop in LL				

int lengthOfLoop(Node *head) {
    if(head == NULL || head -> next == NULL){
        return NULL;
    }
    Node* slow = head;
    Node* fast = head;
    int count = 0;
    while(fast -> next && fast -> next -> next){
        slow = slow -> next;
        fast = fast -> next -> next;
        if(slow == fast){
            slow = slow -> next;
            count++;
            while(slow != fast){
                slow = slow -> next;
                count++;
            }
            return count;
        }
    }
    return NULL;
}

// Check if LL is palindrome or not		
	
Node *getMid(Node *head){
    Node *slow=head;
    Node *fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        fast=fast->next->next;
        slow=slow->next;
    }
    return slow;
}
Node *reverse(Node *head){
    Node *curr=head;
    Node *prev=NULL;
    Node *forward=NULL;
    while(curr!=NULL){
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
    }    
    return prev;
}
bool isPalindrome(Node *head) {
    if (head->next == NULL){
        return true;
    }
    Node *mid=getMid(head);
    Node *temp=mid->next;
    mid->next=reverse(temp);
    Node *head1=head;
    Node *head2=mid->next;
    while(head2!=NULL){
        if(head2->data!=head1->data){
            return false;
        }
        head1=head1->next;
        head2=head2->next;
    }
    //temp=mid->next;
    //mid->next=reverse(temp);
    return true;
}

// Segrregate odd and even nodes in LL				

// Coding Ninjas
Node* segregateEvenOdd(Node* head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    Node *oddH=NULL;
    Node *evenH=NULL;
    Node *oddT=NULL;
    Node *evenT=NULL;
    while(head!=NULL){
        if((head->data)%2==0){
            if(evenH==NULL){
                evenH=head;
                evenT=head;
            }
            else{
                evenT->next=head;
                evenT=evenT->next;
            }
        }
        else{
            if(oddH==NULL){
                oddH=head;
                oddT=head;
            }
            else{
                oddT->next=head;
                oddT=oddT->next;
            }
        }
        head=head->next;
    }
    if(oddH==NULL){
        return evenH;
    }
    else if(evenH==NULL){
        return oddH;
    }
    else {
        evenT->next = oddH;
        oddT->next = NULL;
        return evenH;
    }
}

// Leetcode
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        ListNode *oddH=NULL;
        ListNode *evenH=NULL;
        ListNode *oddT=NULL;
        ListNode *evenT=NULL;
        int count=1;
        while(head!=NULL){
            if(count%2==0){
                if(evenH==NULL){
                    evenH=head;
                    evenT=head;
                    head=head->next;
                }
                else{
                    evenT->next=head;
                    evenT=evenT->next;
                    head=head->next;
                }
            }
            else{
                if(oddH==NULL){
                    oddH=oddT=head;
                    head=head->next;
                }
                else{
                    oddT->next=head;
                    oddT=oddT->next;
                    head=head->next;
                }
            }
            count++;
        }
        if(oddH==NULL){
            return evenH;
        }
        if(evenH==NULL){
            return oddH;
        }
        evenT->next=NULL;
        oddT->next=evenH;
        return oddH;
    }
};

// Remove Nth node from the back of the LL
	
int len(Node* head){
    int count = 0; 
    Node* temp = head;
    while(temp != NULL){
        count++;
        temp = temp->next;
    }
    return count;
}
Node* removeKthNode(Node* head, int K){
    int l = len(head);
    if (K == l) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return head;
    }
    Node* curr = head;
    Node* prev = NULL;
    int count = l - K;
    for(int i = 0; i<count; i++){
        prev = curr;
        curr = curr->next;
    }
    prev->next = curr->next;
    delete curr;
    return head;
}

// Delete the middle node of LL				

// Method-1
Node* deleteMiddle(Node* head){
    if(head==NULL || head->next==NULL){
        return head->next;
    }
    Node* temp=head;
    int l=0;
    while(temp!=NULL){
	temp=temp->next;
	l++;
    }
    l/=2;
    temp=head;
    while(l>1){
	temp=temp->next;
	l--;
    }
    temp->next=temp->next->next;
    return head;
}

// Method-2
Node* deleteMiddle(Node* head) {
    if (head == NULL || head->next == NULL) {
        return NULL;
    }
    Node* slow = head;
    Node* fast = head;
    Node* prev = NULL;
    while (fast != NULL && fast->next != NULL) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    prev->next = prev->next->next;
    delete slow;
    return head;
}

// Sort LL				

class Solution {
public:
    ListNode* sortList(ListNode* head) {
        // If List Contain a Single or 0 Node
        if(head == NULL || head ->next == NULL)
            return head;
        ListNode *temp = NULL;
        ListNode *slow = head;
        ListNode *fast = head;
        // 2 pointer appraoach / turtle-hare Algorithm (Finding the middle element)
        while(fast !=  NULL && fast -> next != NULL){
            temp = slow;
            slow = slow->next;          // low increment by 1
            fast = fast ->next ->next;  // fast incremented by 2
        }   
        temp -> next = NULL;              // end of first left half
        ListNode* l1 = sortList(head);    // left half recursive call
        ListNode* l2 = sortList(slow);    // right half recursive call
        return mergelist(l1, l2);         // mergelist Function call       
    }
    // MergeSort Function O(n*logn)
    ListNode* mergelist(ListNode *l1, ListNode *l2){
        ListNode *ptr = new ListNode(0);
        ListNode *curr = ptr;
        while(l1 != NULL && l2 != NULL){
            if(l1->val <= l2->val){
                curr -> next = l1;
                l1 = l1 -> next;
            }
            else{
                curr -> next = l2;
                l2 = l2 -> next;
            }
            curr = curr ->next;
        }
        // for unequal length linked list
        if(l1 != NULL){
            curr -> next = l1;
            l1 = l1->next;
        }
        if(l2 != NULL){
            curr -> next = l2;
            l2 = l2 ->next;
        }
        return ptr->next;
    }
};

// Sort a LL of 0's 1's and 2's by changing links			

Node* sortList(Node *head)
{
    int zeroCount=0,oneCount=0,twoCount=0;
    Node *temp=head;
    while(temp!=NULL){
        if(temp->data==0) zeroCount++;
        else if(temp->data==1) oneCount++;
        else if(temp->data==2) twoCount++;
        temp=temp->next;
    }
    temp=head;
    while(temp!=NULL){
        if(zeroCount!=0){
            temp->data=0;
            zeroCount--;
        }
        else if(oneCount!=0){
            temp->data=1;
            oneCount--;
        }
        else if(twoCount!=0){
            temp->data=2;
            twoCount--;
        }
    	temp=temp->next;
    }
    return head;
}

// Find the intersection point of Y LL		
	
// Method-1
class Solution {
public:
    int length(ListNode *head){
        int len = 0;
        while(head){
            len++;
            head = head->next;
        }
        return len;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB) return NULL;
        // step1
        int lenA = length(headA), lenB = length(headB);
        // step2
        if(lenA>lenB){
            while(lenA>lenB){
                headA = headA->next;
                lenA--;
            }
        }
        else if(lenA<lenB){
            while(lenA<lenB){
                headB = headB->next;
                lenB--;
            }
        }
        // step 3
        while(headA && headB){
            if(headA==headB) return headA;
            headA = headA->next;
            headB = headB->next;
        }
        return NULL;
    }
};

// Method-2
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    // getting the tail
    ListNode* tail = headA;
    while(tail->next){
        tail = tail->next;
    }
    // creating a loop
    tail->next = headA;
    // detecting and finding the intersection
    ListNode *fast = headB, *slow = headB;
    while(fast && fast->next){
        slow = slow->next;
        fast = fast->next->next;
        if(slow==fast) {
            slow = headB;
            while(slow!=fast){
                slow = slow->next;
                fast = fast->next;
            }
            //undoing the loop
            tail->next = NULL;
            return slow;
        };
    }
    tail->next = NULL;
    return NULL;
}

// Add 1 to a number represented by LL				

Node *addOne(Node *head)
{
    //simply traverse to tail, if num<9 simply incr by 1.
    //if 9 then move back 1 node and check the above condi again. If somehow we came all the 
    //way to head and head also 9 then we create a node and put val = 1 while rest all nodes 0s
    //Now comes the question, how we traverse back?
    //BUT WAIT, while traversing till tail, we keep on checking all data
    //Any node with val = 9, is stored.
    //EDGE CASE N=1
    if(head->next==NULL){
        if(head->data==9){
            Node* newN = new Node(1);
            newN->next = head;
            head->data = 0;
        }
        else{
            head->data = head->data+1;
        }
        return head;
    }
    Node* NotNine = head;
    Node* temp = head;
    while(temp!=NULL){
        if(temp->data!=9){
            NotNine = temp;
        }
        temp = temp->next;
    }
    //now NotNine basically points to RHS node with val <9
    temp = head; // reseting temp to head for future use
    //if NotNine is still head. That means, all nodes after head has data = 9
    //while head may or may not be 9.
    //Edge case Check
    if(NotNine->data==9){
        Node* first = new Node(1);
        first->next = head;
        while(temp!=NULL){
            temp->data = 0;
            temp = temp->next;
        }
        return first;
    }
    //edge case ends
    //Now, we incr NotNine node by 1. ANd whatev nodes is after,
    //we set it all to 0s. Since,we made sure NotNine is our
    //last possible Node that is NOT 9 or <9. Nodes after that is all
    //9s
    NotNine->data = NotNine->data+1;
    NotNine = NotNine->next;
    while(NotNine!=NULL){
        NotNine->data = 0;
        NotNine = NotNine->next;
    }
    return head;
}

// Add 2 numbers in LL

// Coding Ninjas
void insert(Node* &head, Node* &tail,int val){
    Node* temp = new Node(val);
    // if LL is empty
    if(head == NULL){
        head = temp;
        tail = temp;
    }
    else{
        tail -> next = temp;
        tail = temp;
    }
}
Node *addTwoNumbers(Node *head1, Node *head2)
{
    Node *head = NULL;
    Node *tail = NULL;
    int carry = 0;
    while(head1 != NULL || head2 != NULL || carry != 0){
        int val1 = 0;
        if(head1 != NULL)
            val1 = head1 -> data;
        int val2 = 0;
        if(head2 != NULL)
            val2 = head2 -> data;
        int sum = val1 + val2 + carry;
        int digit = sum%10;
        //insert new node 
        insert(head,tail,digit);
        carry = sum / 10;
        if(head1 != NULL)
            head1 = head1 -> next;
        if(head2 != NULL)
            head2 = head2 -> next;    
    }
    return head;
}

// Leetcode
class Solution {
public:
    ListNode *reverse(ListNode* &head){
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* forward=NULL;
        while(curr!=NULL){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }
    void insertAtTail(ListNode* &head,ListNode* &tail,int value){
        ListNode* temp=new ListNode(value);
        if(head==NULL){
            head=temp;
            tail=temp;
            return;
        }
        else{
            tail->next=temp;
            tail=temp;
        }
    }
    ListNode* add(ListNode* l1,ListNode* l2){
        ListNode* ansHead=NULL;
        ListNode *ansTail=NULL;
        int carry=0;
        while(l1!=NULL || l2!=NULL || carry!=0){
            int val1=0;
            if(l1!=NULL){
                val1=l1->val;
                l1=l1->next;
            }
            int val2=0;
            if(l2!=NULL){
                val2=l2->val;
                l2=l2->next;
            }
            int sum=carry+val1+val2;
            int digit=sum%10;
            insertAtTail(ansHead,ansTail,digit);
            carry=sum/10;
        }
        return ansHead;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans=add(l1,l2);
        return ans;
    }
};

// Step 6.4: Medium Problems of DLL

// Delete all occurrences of a key in DLL			

Node * deleteAllOccurrences(Node* head, int k) {
    Node* temp=new Node();
    temp->next=head;
    head=temp;
    while(temp->next){        
        if(temp->next->data == k){       
          Node* n= temp->next;
          temp->next = temp->next->next;
          delete n;
        } 
        else{
            temp=temp->next;
        }
    }
    return head->next;
}

// Find pairs with given sum in DLL				

// Method-1
#include <bits/stdc++.h>
vector<pair<int, int>> findPairs(Node* head, int k)
{
    vector<pair<int,int>>res;
    unordered_set<int> seen;
    Node*temp=head;
    while(temp!=NULL){
        int curr=temp->data;
        int target=k-curr;
        if(seen.find(target)!=seen.end()){
            res.push_back({curr,target});
        }
        seen.insert(curr);
        temp=temp->next;
    }
    return res;
}

// Method-2
#include<bits/stdc++.h>
vector<pair<int, int>> findPairs(Node* head, int k){
    vector<pair<int,int>> res;
    Node*front=head;
    Node*end=head;
    while(end->next!=NULL){
	end=end->next;
    }
    while(front->data < end->data){
        int val=front->data+end->data;
        if(val==k){
            res.push_back({front->data,end->data});
            front=front->next;
            end=end->prev;
        }
        else if(val>k){
            end=end->prev;
        }
        else{
            front=front->next;
        }
    }
    return res;
}

// Remove duplicates from sorted DLL

Node * uniqueSortedList(Node * head) {
    if(head==NULL)return NULL;
    Node* curr=head;
    while(curr!=NULL){
        if(curr->next!=NULL && curr->data==curr->next->data){
            Node* next_next=curr->next->next;
            Node* nodeToDelete=curr->next;
            delete(nodeToDelete);
            curr->next= next_next;
        }
        else{
            curr=curr->next; 
        }
    }
    return head;
}

// Step 6.5: Hard Problems of LL

// Reverse LL in group of given size K		
	
// Method-1
Node *kReverse(Node *head, int k){
    Node *curr = head;
    Node *prev = NULL, *next = NULL;
    int cnt = 0;
    // Reversing the first K nodes of the given linked list.
    while (curr != NULL && cnt < k){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        cnt++;
    }
    // If the last group has < k nodes, reversing it again to get the previous order.
    if (cnt < k){
        curr = prev;
        prev = NULL;
        next = NULL;
        cnt = 0;
        while (curr && cnt < k){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            cnt++;
        }
    }
    // If some nodes are still left, then we pass it to the recursive function.
    if (next != NULL){
        head->next = kReverse(next, k);
    }
    return prev;
}

// Method-2
Node *kReverse(Node *head, int k){
    Node *prev = NULL;
    Node *curr = head;
    Node *next = NULL;
    Node *tail = NULL;
    Node *newHead = NULL;
    Node *join = NULL;
    // Reversing the list until we have nodes in the list.
    while (curr){
        int cnt = 0;
        join = curr;
        prev = NULL;
        // Reversing the nodes in group of k.
        while (curr && cnt < k){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            cnt++;
        }
        // If the last group has < k nodes, reversing it again to get the previous order.
        if (cnt < k){
            curr = prev;
            prev = NULL;
            join = curr;
            cnt=0;
            while (curr && cnt < k){      
                next = curr->next;
                curr->next = prev;
                prev = curr;
                curr = next;
                cnt++;
            }
        }
        // If the newHead is not yet assigned, then assign it
        if (newHead == NULL){
            newHead = prev;
        }
        if (tail != NULL){
            tail->next = prev;
        }
        tail = join;
    } 
    return newHead;
}

// Rotate a LL		
	
Node *rotate(Node *head, int k) {
     if(head==NULL || head->next==NULL || k==0){
          return head;
     }
     Node *temp=head;
     int size=1;
     while(temp->next!=NULL){
          temp=temp->next;
          size++;
     }
     temp->next=head;
     k=k%size;
     k=size-k;
     while(k!=0){
          temp=temp->next;
          k--;
     }
     head=temp->next;
     temp->next=NULL;
     return head;
}

// Flattening of LL		

Node* merge(Node* &down, Node* &right){
    if(down == NULL){
        return right;
    }
    if(right == NULL){
        return down;
    }
    Node* ans = new Node(-1);
    Node* temp = ans;
    while(down != NULL && right != NULL){
        if(down -> data < right -> data){
            temp -> child = down;
            temp = down;
            down = down -> child;
        }
        else {
            temp -> child = right;
            temp = right;
            right = right-> child;
        }
    }
    while(down != NULL){
        temp -> child = down;
        temp = down;
        down = down -> child;
    }
    while(right != NULL){
        temp -> child = right;
        temp = right;
        right = right -> child;
    }
    ans = ans -> child;
    return ans;
}
Node* flattenLinkedList(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    Node* down = head;
    Node* right = flattenLinkedList(head->next);
    down->next=NULL;
    return merge(down,right);
}

// Clone a Linked List with random and next pointer

// Method-1
void insertAtTail(Node* &head,Node* &tail,int data){
    Node* temp1 = new Node(data);
    if(head == NULL){
        head = temp1;
        tail = temp1;
    }
    else{
        tail->next = temp1;
        tail = temp1;
    }
}
Node *cloneLL(Node *head){
    Node* cloneHead = NULL;
    Node* cloneTail = NULL;
    Node* temp = head;
    while(temp!=NULL){
        insertAtTail(cloneHead,cloneTail,temp->data);
        temp = temp->next;
    }
    unordered_map<Node*,Node*>mapping;
    Node* originalNode = head;
    Node* cloneNode = cloneHead;
    while(originalNode!=NULL){
        mapping[originalNode] = cloneNode;
        originalNode = originalNode->next;
        cloneNode = cloneNode->next;
    }
    originalNode = head;
    cloneNode = cloneHead;
    while(originalNode!=NULL){
        cloneNode->random = mapping[originalNode->random];
        originalNode = originalNode->next;
        cloneNode = cloneNode->next;
    }
    return cloneHead;
}

// Method-2
Node *cloneLL(Node *head){
    Node *curr = head, *temp = NULL;
    // Insert duplicate nodes after every node of original list
    while (curr != NULL){
        temp = curr->next;
        // Inserting node
        curr->next = new Node(curr->data);
        curr->next->next = temp;
        curr = temp;
    }
    curr = head;
    // Adjust the random pointers of the newly added nodes
    while (curr != NULL){
        if (curr->next != NULL){
            if (curr->random != NULL){
                curr->next->random = curr->random->next;
            }
            else{
                curr->next->random = curr->random;
            }
        }
        // Move to the next newly added node by skipping an original node
        if (curr->next != NULL){
            curr = curr->next->next;
        }
        else{
            curr = curr->next;
        }
    }
    Node *original = head, *copy = NULL;
    if (head != NULL){
        copy = head->next;
    }
    // Save the start of copied linked list
    temp = copy;
    // Separate the original list and copied list
    while (original != NULL && copy != NULL)
    {
        if (original->next != NULL){
            original->next = original->next->next;
        }
        if (copy->next != NULL){
            copy->next = copy->next->next;
        }
        original = original->next;
        copy = copy->next;
    }
    // Return the head of the cloned list
    return temp;
}
