/* Step 8.1: Learn Bit Manipulation */

// Introduction to Bit Manipulation [Theory]				

/* Approach:
1. For first operation, we will shift num to the right by i-1 times, so that ith bit moved to the right most position, then we will & with 1 to get the ith bit as a LSB.
2. For second operation, we will take 1 at position 1 and left shfit 1 by i-1 times, so that 1 will move to the ith position of num, then we will | with num.
3. For third operation, We have already set 1 at ith position of num in op2. we also know that xor of 1^1 results 0. so we will again take one at position 1 and left shfit 1 by i-1 times, so that 1 will move to the ith position of num, then we will ^ with op2. */
vector<int> bitManipulation(int num, int i){
    int op1 = num>>(i-1) & 1;
    int op2 = 1<<(i-1) | num;
    int op3 = 1<<(i-1) ^ op2;
    return {op1, op2, op3};
}

// Check if the i-th bit is set or not				

bool isKthBitSet(int n, int k){
    return (n>>(k-1)&1)?true:false;
}

// Check if a number is odd or not				

string oddEven(int N){
    return (N&1)?"odd":"even";
}

// Check if a number is power of 2 or not		

#include<bits/stdc++.h>
bool isPowerOfTwo(int n){
    int ans=1;	
    for(int i=0;i<=30;i++){
        if(ans==n){
            return true;
        }
        if(ans<INT_MAX/2){
            ans=ans*2;
        }
    }
    return false;
}

// Count the number of set bits				

// Method-1
int countSetBits(int n){
    int count = 0;
    for (int i = 1; i <= n; i++) {
        int num = i;
        while (num > 0) {
            count += num & 1;
            num >>= 1;
        }
    }
    return count;
}

// Method-2
int largetPowerOf2inRange(int n){
    int x=0;
    while((1<<x)<=n){
        x++;
    }
    return (x-1);
}
int countSetBits(int n){
    if(n==0){
        return 0;
    }
    int x=largetPowerOf2inRange(n);
    int bitsTillx=x*(1<<(x-1));
    int msb2xton=n-(1<<x)+1;
    int rest=n-(1<<x);
    int ans= bitsTillx+msb2xton+countSetBits(rest);
    return ans;
}

// Set/Unset the rightmost unset bit				

int setBits(int N) {
    if ((N ^ N + 1) == (N << 1) + 1) { // or if((N&(N+1))==0)
        return N;
    }
    return (N | (N + 1));
}

// Swap two numbers				

void swapNumber(int &a, int &b) {
     a=a^b;
     b=a^b;
     a=a^b;
}

// Divide two integers without using multiplication,division and mod operator

class Solution {
public:
    int divide(int dividend, int divisor) {
        if(dividend <= -1<<31 && divisor == -1){
            return INT_MAX;
        }
        if(dividend <= -1<<31 && divisor == 1){
            return INT_MIN;
        }
        bool sign = ((dividend<0) ^ (divisor<0));
        long int dvid= abs(dividend);
        long int div = abs(divisor);    
        long long int ans=0,temp=0;
        for(int i=31;i>=0;i--){
            if(temp + (div<<i) <= dvid){
                temp += div<<i;
                ans += 1<<i;
            }
        }
        if(sign){
            ans= -ans;
        }
        return ans;
    }
};

/* Step 8.2: Interview Problems */

// Count number of bits to be flipped to convert A to B		

int flipBits(int a, int b){
    int xr=a^b;
    int count=0;
    while(xr){
        xr=xr&(xr-1);
        count++;
    }
    return count;
}

// Find the number that appears odd number of times				

int missingNumber(int n, vector<int> &arr){
    int x=0;
    for(int i=0;i<n;i++){
        x^=a[i];
    }
    return x;
}

// Power Set		
	
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> ans;
        for(int i=0;i<(1<<n);i++){ // pow(2,n)=(1<<n)
            vector<int> v;
            for(int j=0;j<n;j++){
                if((1<<j)&i){
                    v.push_back(nums[j]);
                }
            }
            ans.push_back(v);
        }
        return ans;
    }
};

// Find xor of numbers from L to R				

int findXOR(int L, int R){
    // Finding the XOR of all elements from 1 to R
    int ans = 0;
    if (R % 4 == 0) {
        ans = R;
    }
    else if (R % 4 == 1) {
        ans = 1;
    }
    else if (R % 4 == 2) {
        ans = R + 1;
    }
    else if(R % 4 == 3){
        ans = 0;
    }
    // Finding XOR of all elements from 1 to L-1
    L = L - 1;
    int ans1 = 0;
    if (L % 4 == 0) {
        ans1 = L;
    } 
    else if (L % 4 == 1){
        ans1 = 1;
    }
    else if (L % 4 == 2){
        ans1 = L + 1;
    }
    else if (L % 4 == 3){
        ans1 = 0;
    }
    // final answer will XOR of both the results
    return ans ^ ans1;
}

// Find the two numbers appearing odd number of times

/* Approach in steps:
1. find xor of all the elements of array and let it be called as ans.
2. find right most bit of ans and call it as ith bit
3. separate elements from array whose ith bit is on from those whoose ith bit is off
4. then do xor separately, you will get two elements. */
// we are doing step 3 because if one element is having odd no of times then 1 in ith bit is also odd no. of times and 0 in ith bit is also odd no. of times
vector<int> twoOddNum(vector<int> arr){
    int xorr=0;
    // xor of all arr elements
    for(int i=0;i<arr.size();i++){
        xorr^=arr[i];
    }
    // rightmost set bit 
    int rset=xorr&(~(xorr-1));
    //partition in groups
    int ans1=0;
    int ans2=0;
    for(int i=0;i<arr.size();i++){
        if(arr[i]&rset){
            ans1^=arr[i];
        }
        else{
            ans2^=arr[i];
        }
    }
    return {max(ans1, ans2), min(ans1, ans2)};
}

/*  Step 8.3: Advanced Maths */

// Print Prime Factors of a Number				

class Solution {
public:
    int countPrimes(int n) {
        int count=0;
        vector<bool> prime(n+1,true);
        prime[0]=prime[1]=false;
        for(int i=2;i<n;i++){
            if(prime[i]){
               count++; 
            }
            for(int j=2*i;j<n;j=j+i){
                prime[j]=0;
            }
        }
        return count;
    }
};

// All Divisors of a Number				

vector<int> printDivisors(int n) {
    vector<int> ans;
    for(int i = 1; i <= sqrt(n); i++) {
        if(n % i == 0) {
            ans.push_back(i);
            int div = n / i;           
            if(n % div == 0 and i != div){
                ans.push_back(div);
            }
        }
    }
    sort(ans.begin(), ans.end());
    return ans;
}

// Sieve of Eratosthenes				

class Solution {
public:
    int countPrimes(int n) {
        vector<bool> prime(n+1,true);
        for(int i=2;i*i<=n;i++){
            if(prime[i]){
                for(long long j=(long long)i*i;j<=n;j+=i)
                prime[j]=false;
            }
        }
        int cnt=0;
        for(int i=2;i<n;i++){
            if(prime[i]==true) cnt++;
        }
        return cnt;
    }
};

// Find Prime Factorisation of a Number			

class Solution {
public:
    int countPrimes(int n) {
        vector<bool> prime(n+1,true);
        for(int i=2;i*i<=n;i++){
            if(prime[i]){
                for(long long j=(long long)i*i;j<=n;j+=i)
                prime[j]=false;
            }
        }
        int cnt=0;
        for(int i=2;i<n;i++){
            if(prime[i]==true) cnt++;
        }
        return cnt;
    }
};

// Power(n, x)

// CN
int mod=1e9+7;
int power(int N, int reverse){
    long long result=1;
    long long base=N;
    while(reverse > 0){
        if(reverse & 1){
            result=(result*base)%mod;
        }
        base=(base*base)%mod;
        reverse=reverse>>1;
    }
    return result;
}

// LC
class Solution {
public:
    double myPow(double x, int n) {
        int b = abs(n);
        double ans = 1;
        if(n == 0){
            return 1;
        }
        while(b > 0){
            if(b&1){
                ans = ans * x;
            }
            x = x*x;
            b = b >> 1;
        }
        if(n>0){
            return ans;
        }
        return 1/ans;
    }
};
